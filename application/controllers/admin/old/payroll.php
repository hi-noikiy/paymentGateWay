<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of payroll
 *
 * @author NaYeM
 */
class Payroll extends Admin_Controller {

    public function __construct() {
        parent::__construct();
		$this->load->model('attendance_model');
		$this->load->model('accounting_model');
        $this->load->model('payroll_model');
		$this->load->library('user_agent');
    }
	
	
		/*---------------------- Start Add on portion ----------------------------*/
	public function addon()
	 {
		$data['title'] = "Add-on Options";
		$this->attendance_model->_table_name = "tbl_department"; //table name
        $this->attendance_model->_order_by = "department_id";
        $data['all_department'] = $this->attendance_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
        $data['subview'] = $this->load->view('admin/payroll/add_on_details', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
		
	}
	 
	public function get_report() {
		$data['title'] = "Monthly Wroking Hours Report";
        $department_id = $this->input->post('department_id', TRUE);
		$employee_id = $this->input->post('employee_id') ? $this->input->post('employee_id'):0;
        $date = $this->input->post('date', TRUE);
		$payment_frequency = $this->input->post('payment_frequency', TRUE);
        $month = date('n', strtotime($date));
        $year = date('Y', strtotime($date));
        $num = cal_days_in_month(CAL_GREGORIAN, $month, $year);
		
       $data['employee'] = $this->attendance_model->get_employee_working_info_by_depart_id_month($department_id,$employee_id,$payment_frequency,$month,$year,$num);
	   $data['myn'] = $month.'-'.$year.'-'.$num;
	   $data['department_id_excel'] = $department_id;
	   $data['employee_id_excel'] = $employee_id;
	   $data['payment_frequency_excel'] = $payment_frequency;	   

        $data['subview'] = $this->load->view('admin/payroll/addon_report', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	
	public function create_excel() {
		$department_id = $this->uri->segment(4);
		$myn = $this->uri->segment(5);
		$employee_id = $this->uri->segment(6);
		$payment_frequency = $this->uri->segment(7);
		$myn = explode('-',$myn);
		$date = $myn[1].'-'.$myn[0];
        //load PHPExcel library
        $this->load->library('Excel');
        ob_start();
        // Create new PHPExcel object
        $objPHPExcel = new PHPExcel();
        $styleArray = array(
            'font' => array(
                'size' => 13,
                'name' => 'Verdana'
        ));
        $fontArray = array(
            'font' => array(
                'bold' => true,
                'size' => 11,
                'name' => 'Verdana'
        ));
        $dateArray = array(
            'font' => array(
                'bold' => true,
        ));
        $bgcolor = array(
            'fill' => array(
                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                'color' => array('rgb' => 'E7E7E7'),
        ));
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('B' . '1', 'Date:')
                ->setCellValue('D' . '1', date('F-Y', strtotime($date)));
        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:C1');
        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('D1:H1');
        $objPHPExcel->getActiveSheet()->getStyle('B1:C1')->applyFromArray($fontArray);

        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('J' . '1', 'Department:')
                ->setCellValue('N' . '1', $dept_name->department_name);
        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('J1:M1');
        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('N1:V1');
        $objPHPExcel->getActiveSheet()->getStyle('J1:L1')->applyFromArray($fontArray);

// Set document properties
        $objPHPExcel->getProperties()->setCreator("Comprehensive School Management")
                ->setLastModifiedBy("Comprehensive School Management")
                ->setTitle("Office  XLSX Test Document")
                ->setSubject("Office XLSX Test Document")
                ->setDescription("Test document for Office XLSX, generated by PHP classes.")
                ->setKeywords("office openxml php")
                ->setCategory("Excel Sheet");


// Add some data  
		$colstitles = array("Employee Name", "REG", "OT", "PRM", "PHOL1", "PHOL2", "SICK", "VACATION");
        $cl = 'A';
        $bg = 'A';
        foreach ($colstitles as $colstitle) {
            $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($cl . '3', $colstitle);
            $objPHPExcel->getActiveSheet()->getColumnDimension($cl)->setWidth(15);
            $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(20);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '3')->getFont()->setSize(9);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '3')->applyFromArray($dateArray);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '4')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '1')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '2')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($bg . '4')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($bg . '1')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($bg . '2')->applyFromArray($bgcolor);
            $objPHPExcel->getActiveSheet()->getStyle($cl . '3')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $cl++;
        }
		$employee = $this->attendance_model->get_employee_working_info_by_depart_id_month($department_id,$employee_id,$payment_frequency,$myn[0],$myn[1],$myn[2]);
		if (!empty($employee)){ 
        $row = 5;
        $c = 0;
			for ($i=0;$i<count($employee);$i++ ){
			
			for($col = 0; $col<8; $col++){
			if($col==0){
            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $employee[$i]['first_name'].' '.$employee[$i]['last_name']);
			}if($col==1){
            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $employee[$i]['totalRegularDays']);
			}
			if($col==6 || $col==7){
				$getothers = $this->attendance_model->get_employee_working_others_info_by_depart_id_month($employee[$i]['employee_id'],$myn[0],$myn[1],$myn[2]);
				for ($j=0;$j<count($getothers);$j++ ){
				if($getothers[$j]['category']=='Sick Leave' && $col==6){
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $getothers[$j]['totalOthersLeave']);
				}
				if($getothers[$j]['category']=='Vacation Leave' && $col==7){
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $getothers[$j]['totalOthersLeave']);
				}				
				
			  }
			}
            $objPHPExcel->getActiveSheet()->getColumnDimension('A1')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);
            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getRowDimension($row)->setRowHeight(20);
		}
			 $row++;
            $c++;
		}
	}
// Rename worksheet (worksheet, not filename)
        $objPHPExcel->getActiveSheet()->setTitle('Student Attendance');


// Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);

// Redirect output to a clientâ€™s web browser (Excel2007)
//clean the output buffer
        ob_end_clean();
//this is the header given from PHPExcel examples. but the output seems somewhat corrupted in some cases.
//header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
//so, we use this header instead.
        $filename = date("F j, Y, g:i a") . '  ' . 'Export to Visual Payroll.xls'; //save our workbook as this file name
		//$filename =  '16-11-2016 Employee Attendance.xls'; //save our workbook as this file name

        header('Content-type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name
        header('Cache-Control: max-age=0');

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
    }
	 /*----------------------End Add on portion----------------------------*/
	 
	 
	/*----------------------CALCULATE CPF----------------------------*/
	public function getEmployeeCPF()
	 {
			$this->form_validation->set_rules('sector', "sector", 'trim|required|xss_clean');
			if ($this->form_validation->run() == true)
			{
				$data = array('year' =>  date('Y'),
		  			'empAge' => $this->input->post('empAge'),
		  			'sector' => $this->input->post('sector'),
		  			'salary' => $this->input->post('salary')
		  								  );
		  		$cpfInfo 	= $this->payroll_model->getSalaryCalculationForCpf($data);
		  		
		  		echo json_encode($cpfInfo);
		  	}
	}
	 
	 /*----------------------CALCULATE Deduction----------------------------*/
	public function getEmployeeDeduction()
	 {
			$this->form_validation->set_rules('sector', "sector", 'trim|required|xss_clean');
			if ($this->form_validation->run() == true)
			{
				//@sunny for calculate ss paytax and nhi depend on payment frequecy
				$salary=$this->input->post('salary');
				$databasePaymentFrequency=$this->input->post('payment_frequency');
				
				
				$data = array('year' =>  date('Y'),
		  			'empAge' => $this->input->post('empAge'),
		  			'sector' => $this->input->post('sector'),
		  			'salary' => $salary,
		  			'payment_frequency' => $databasePaymentFrequency,		  			
		  			'employee_id' => $this->input->post('employee_id')
		  		);
		  		
		  		$deductInfo['ss'] = $this->payroll_model->getSalaryCalculationForSS($data);
		  		$deductInfo['pt'] = $this->payroll_model->getSalaryCalculationForPayTax($data);
		  		$deductInfo['nhi'] = $this->payroll_model->getSalaryCalculationForNHI($data);
		  		$deductInfo['taxable_gross_salary'] = $this->payroll_model->gotNonTaxableSalary($data);//@pank for calculate taxable gross salary 17-8-2016
		  		echo json_encode($deductInfo);
		  	}
	 }
	 
	 /*----------------------CALCULATE SDL----------------------------*/
	 public function getEmployeeSDL()
	 {
			$this->form_validation->set_rules('salary', "salary", 'trim|required|xss_clean');
			//echo $this->input->post('salary');die;
			if ($this->form_validation->run() == true)
			{
		  		$sdlnfo 	= $this->payroll_model->getSalaryCalculationForSDL($this->input->post('salary'));
		  		if($sdlnfo->calc=='0.25')
				{
					$sdl = round(($this->input->post('salary')*0.25)/100,3);
				}
				else {
					$sdl = $sdlnfo->calc;
				}
		  		echo $sdl;
		  	}
	 }
	 
	  /*----------------------CALCULATE ETHNIC----------------------------*/
	public function getEmployeeETHNIC()
	{
			$this->form_validation->set_rules('salary', "Salary", 'trim|required|xss_clean');
			$this->form_validation->set_rules('ethnic', "Ethnic", 'trim|required|xss_clean');
			//echo $this->input->post('salary');die;
			if ($this->form_validation->run() == true)
			{
		  		$ethnicnfo = $this->payroll_model->getSalaryCalculationForETHNIC($this->input->post('salary'),$this->input->post('ethnic'));
		  		echo json_encode($ethnicnfo->monthly_contribution);
		  	}
	}
    public function manage_salary_details($id = NULL, $designations_id = NULL) 
	{
        $data['title'] = "Manage Salary Details";
        // retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
        $all_dept_info = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
        // get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }

        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag) || !empty($id)) { // check employee id is empty or not 
            $data['flag'] = 1;
            if (!empty($id)) {
                $data['employee_id'] = $id;
                $data['designations_id'] = $designations_id;
            } else {
                $data['employee_id'] = $this->input->post('employee_id', TRUE);
                $data['designations_id'] = $this->input->post('designations_id', TRUE);
            }
            
			// get employee salary info by employee id and check 
            $data['emp_salary'] = $this->payroll_model->get_emp_salary_list($data['employee_id']);
            
			//get all employee info by designation id
           
		    $this->load->model('employee_model');
			$data['empInfo'] = $this->employee_model->getEmployeeById($data['employee_id']);
            
			//print_r($data['empInfo']);
			$this->payroll_model->_table_name = 'tbl_employee';
			$this->payroll_model->_order_by = 'designations_id';
            $data['employee_info'] = $this->payroll_model->get_by(array('designations_id' => $data['designations_id'],'id_gsettings' => $this->session->userdata('id_gsettings')), FALSE);
			
			$data['ethnics'] = $this->payroll_model->ethnic();
			
			$this->payroll_model->_table_name = 'tbl_allow_ded';
			$this->payroll_model->_order_by = 'id';
            $data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
			
		}
        $data['subview'] = $this->load->view('admin/payroll/manage_salary_details', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
    public function manage_ytd_reports() {
        $data['title'] = "Manage YTD Reports";
        // retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
		
        $all_dept_info = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		
        // get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }

        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag)) { // check employee id is empty or not 
            $data['flag'] = 1;
			$emp_id = $this->input->post('employee_id');
			$pay_freq = $this->input->post('payment_frequency');
			$desg = $this->input->post('designations_id');
			if(!empty($emp_id))
			{
				$data['employee_id'] = $this->input->post('employee_id', TRUE);
			}
			if(!empty($pay_freq))
			{
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);
			}
			$data['date'] = $this->input->post('date', TRUE);
			if(!empty($desg))
			{
				$data['designations_id'] = $this->input->post('designations_id', TRUE);
				
				$this->payroll_model->_table_name = 'tbl_employee';
				$this->payroll_model->_order_by = 'designations_id';
				
				$data['employee_info'] = $this->payroll_model->get_by(array('designations_id' => $data['designations_id']), FALSE);
			}
			//echo "<pre>";
			
            // get employee salary info by employee id and check 
            $data['payment_history'] = $this->payroll_model->get_salary_ytd_list($data);
			//print_r($data['emp_salary']);die;
			
		}
        $data['subview'] = $this->load->view('admin/payroll/manage_ytd_reports', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

    public function save_salary_details($id = NULL) {
    // inout data
        //$data = $this->payroll_model->array_from_post(array('employment_type','salary_type', 'basic_salary', 'house_rent_allowance', 'medical_allowance','special_allowance', 'fuel_allowance', 'phone_bill_allowance', 'other_allowance', 'provident_fund','employerCpf','sdl','ethnic_fund', 'tax_deduction', 'other_deduction', 'employee_id','job_sector','ethnic_type','social_security','nhi_deduction','spouse_nhi_deduction','payroll_tax_deduction','employerSS','employerPayTax','employerNHI','payment_frequency'));
		
		$data = $this->payroll_model->array_from_post(array('employment_type','salary_type', 'basic_salary', 'employerCpf', 'employee_id','job_sector','social_security','nhi_deduction','spouse_nhi_deduction','payroll_tax_deduction','employerSS','employerPayTax','employerNHI','payment_frequency'));
		//echo "<pre>";print_r($data);die;
        // save into tbl employee payroll
		
		$extra_allow = '';
		//extra user define allowance
		foreach($this->input->post('description_allow') as $i => $allow_desc)
		{
			if(!empty($this->input->post('description_allow')[$i]) && !empty($this->input->post('allowance')[$i]))
				$extra_allow .= $this->input->post('description_allow')[$i].'='.$this->input->post('allowance')[$i].'<-->';
		}
		$data['extra_allowance'] = $extra_allow;
		
		//extra user define deduction
		$extra_deduct = '';
		foreach($this->input->post('description_deduct') as $i => $allow_desc)
		{
			if(!empty($this->input->post('description_deduct')[$i]) && !empty($this->input->post('deduction')[$i]))
				$extra_deduct .= $this->input->post('description_deduct')[$i].'='.$this->input->post('deduction')[$i].'<-->';
		}
		$data['extra_deduction'] = $extra_deduct;
		$data['id_gsettings'] = $this->session->userdata('id_gsettings');
		
        $this->payroll_model->_table_name = "tbl_employee_payroll"; // table name
        $this->payroll_model->_primary_key = "payroll_id"; // $id
        $this->payroll_model->save($data, $id);

        $type = 'success';
        $message = 'Salary Details Information Successfully Save';
        set_message($type, $message);
        redirect('admin/payroll/employee_salary_list');
    }

    public function employee_salary_list() {
        $data['title'] = "Employee Salary Details";
		
		//global deduction and allowance
		$this->payroll_model->_table_name = 'tbl_allow_ded';
		$this->payroll_model->_order_by = 'id';
		$data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		
        // get all employee salary info  
        $data['emp_salary_info'] = $this->payroll_model->get_emp_salary_list();
       // $data['emp_salary_info'] = $this->payroll_model->get_salary_payment_info();
        
        $data['subview'] = $this->load->view('admin/payroll/employee_salary_list', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

    public function view_salary_details($id) {
        $data['title'] = "View Salary Details";
        // get all employee salary info   by id
        $data['emp_salary_info'] = $this->payroll_model->get_emp_salary_list($id);
		//global Allowance and Deduction
		$this->payroll_model->_table_name = 'tbl_allow_ded';
		$this->payroll_model->_order_by = 'id';
		$data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		
		if(empty($data['emp_salary_info']))
		{
			$type = 'error';
			$message = 'No record Found';
			set_message($type, $message);
			redirect('admin/payroll/employee_salary_list');
		}
		$data['ethnics'] = $this->payroll_model->ethnic();
        $data['subview'] = $this->load->view('admin/payroll/employee_salary_details', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

    public function make_pdf($id) {
        $data['title'] = "View Salary Details";
		
		//global Allowance and Deduction
		$this->payroll_model->_table_name = 'tbl_allow_ded';
		$this->payroll_model->_order_by = 'id';
		$data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		
        // get all employee salary info  by id
        $data['emp_salary_info'] = $this->payroll_model->get_emp_salary_list($id);
        $viewfile = $this->load->view('admin/payroll/employee_salary_pdf', $data, TRUE);
        $this->load->helper('dompdf');
        pdf_create($viewfile, 'Salary Details - ' . $data['emp_salary_info']->first_name . ' ' . $data['emp_salary_info']->last_name);
    }

    public function make_payment($id = NULL) { 
               /*$CI = &get_instance();
		$CI->load->database();
		echo 'USER => '.$CI->db->username.'</br>';
		echo 'PASS => '.$CI->db->password.'</br>';
		echo 'DATABASE => '.$CI->db->database.'</br>';
		echo 'HOST => '.$CI->db->hostname;*/
		$data['title'] = "Make Payment"; 
	  
		//******@sunny Select company all payment dates starts here****** 
        $this->load->model('settings_model');
		$this->settings_model->_table_name = "tbl_payment_date_settings"; //table name
		$this->settings_model->_order_by = "id";
		$val = $this->settings_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')), TRUE);

		if ($val) { // get general info by id
			foreach($val as $key => $value){
				if($key=='id'){
					$data["tbl_payment_date_settings_id"] = $value; // assign value from db 
				}
				else{
					$data[$key] = $value; // assign value from db 
				}
			}   
		}
		//******@sunny Select company all payment dates ends here******
        
		// retrive all data from department table
		$this->payroll_model->_table_name = "tbl_department"; //table name
		$this->payroll_model->_order_by = "department_id";
		$all_dept_info = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		// get all department info and designation info
		foreach ($all_dept_info as $v_dept_info) {
			$data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
		}
               
		$flag = $this->input->post('sbtn', TRUE);
		// check employee id is empty or not 
		if (!empty($flag)) 
		{ 
			$data['flag'] = 1;

			//get all employee by company
			$where = array('id_gsettings' => $this->session->userdata('id_gsettings'));
					
						
			//Check filter value and search data
			if($this->input->post('designations_id') != "")
			{
				$data['designations_id'] = $this->input->post('designations_id', TRUE);
				$where['designations_id'] = $data['designations_id'];
			}
			if($this->input->post('employee_id') != "")
			{
				$data['employee_id'] = $this->input->post('employee_id', TRUE);
				$where['employee_id'] = $data['employee_id'];
			}
			
			
			//get all employee info by payment frequency
			$this->payroll_model->_table_name = 'tbl_employee';
			$this->payroll_model->_order_by = 'designations_id';
			$data['employee_info'] = $this->payroll_model->get_by($where);
			
			
			
			if($this->input->post('designations_id') != "")
			{
				$data['designations_id'] = $this->input->post('designations_id', TRUE);
				$where['designations_id'] = $data['designations_id'];
				$data['employee_info_emp'] = $this->payroll_model->get_by(array('designations_id' => $data['designations_id']), FALSE);
			}
			
			//date used for filters
			$data['start_payment_date'] = $this->input->post('start_payment_date', TRUE);
			$data['end_payment_date'] = $this->input->post('end_payment_date', TRUE);
			
			$where['start_payment_date'] = $data['start_payment_date'];
			$where['end_payment_date'] = $data['end_payment_date'];	
			$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);
			// print_r($data['payment_frequency']);
			if($this->input->post('payment_frequency') != "")
			{ 
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);
				if($data['payment_frequency']==0)
				{
					$where['payment_frequency'] = $data['payment_frequency'];
				}
				else{
					$where['payment_frequency'] = $data['payment_frequency'];
				}	
			}
			//print_r($where); die;
			$check_salary_payment = $this->payroll_model->get_salary_payment_details($where);
       
			//print_r($check_salary_payment); die;
			$payment_frequency_date=array();
			
			//@sunny  payment frequency && employee_id && depat selected
			if(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') != "") && ($this->input->post('designations_id') != "" ))
			{	
				 
				//@sunny create start and end dates according to payment frequency
				
				$this->payroll_model->_table_name = 'tbl_employee_payroll';
				$this->payroll_model->_order_by = 'employee_id';
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);	
  

				if(isset($data['employee_info'][0]->employee_id)){

 					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $data['employee_info'][0]->employee_id,'payment_frequency' => $data['payment_frequency']), FALSE);

 
				} 
				$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $data['employee_info'][0]->employee_id,'payment_frequency' => $data['payment_frequency']), FALSE);
				 
				//Two Weekly
 /* if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){ : 28-10-2016 */

				if($data['payment_frequency']==0 ){
					
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$data['employee_info'][0]->joining_date);
					
				}
				//Weekly
/*if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){ 28-10-2016 */ 

				if($data['payment_frequency']==1  ){
					
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$data['employee_info'][0]->joining_date);
 


				}
				//Bi-Monthly
/*if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){ : 28-10-2016 */

				if($data['payment_frequency']==2){
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $data['employee_info'][0]->joining_date);					
				}
				//Monthly
/*if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){ : 28-10-2018  */
				if($data['payment_frequency']==3){
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$data['employee_info'][0]->joining_date);
				}
				
			}
			//@sunny   employee_id && depat selected
			else if(($this->input->post('payment_frequency') == "" ) && ($this->input->post('employee_id') != "") && ($this->input->post('designations_id') != "" ))
			{	
				
				$this->payroll_model->_table_name = 'tbl_employee_payroll';
				$this->payroll_model->_order_by = 'employee_id';
				$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $data['employee_info'][0]->employee_id /*,'payment_frequency' => $data['payment_frequency']*/ ), FALSE);
				if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
				$data['payment_frequency']=$data['employee_info_of_payment_frequecy'][0]->payment_frequency;
				}			
				//print_r(count($data['employee_info_of_payment_frequecy'] )); 
				//Two Weekly
                                /*if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ) : 28-10-2016 */

				if($data['payment_frequency']==0  ){
					
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$data['employee_info'][0]->joining_date);
				}
				//Weekly
                                /*if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){ : 28-10-2016 */

				if($data['payment_frequency']==1 ){
					
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$data['employee_info'][0]->joining_date);
				}
				//Bi-Monthly
				if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $data['employee_info'][0]->joining_date);					
				}
				//Monthly
				if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){
					$payment_frequency_date = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$data['employee_info'][0]->joining_date);
				}
				
			}
			
			//@pankaj 30-9-2016 for only payment freq 
			else if(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') == "" ))
			{	
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);	
				
				foreach($data['employee_info'] as $emp_info)
				{ 	$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id ,'payment_frequency' => $data['payment_frequency'] ), FALSE);
					//print_r($payment_frequency_date); die;
					//Two Weekly
					
						if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						
					//print_r($payment_frequency_date); die;
						}
						//Weekly
						if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}
						//Bi-Monthly
						if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $emp_info->joining_date);					
							array_push( $payment_frequency_date, $custom_array );
						}
						//Monthly
						if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}					
				}				
			}
			else if(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') != "" ))
			{	
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);	
				
				foreach($data['employee_info'] as $emp_info)
				{ 	$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id ,'payment_frequency' => $data['payment_frequency'] ), FALSE);
					//print_r($payment_frequency_date); die;
					//Two Weekly
					
						if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						
					//print_r($payment_frequency_date); die;
						}
						//Weekly
						if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}
						//Bi-Monthly
						if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $emp_info->joining_date);					
							array_push( $payment_frequency_date, $custom_array );
						}
						//Monthly
						if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}					
				}
				//print_r($payment_frequency_date); die;				
			}

			//@pankaj 30-9-2016 for only Department selected
			else if(($this->input->post('payment_frequency') == "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') != "" ))
			{
								
				foreach($data['employee_info'] as $emp_info)
				{ 	$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id ), FALSE);
					
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					$data['payment_frequency']=$data['employee_info_of_payment_frequecy'][0]->payment_frequency;
					}
					//Two Weekly
					
						if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}
						//Weekly
						if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}
						//Bi-Monthly
						if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $emp_info->joining_date);					
							array_push( $payment_frequency_date, $custom_array );
						}
						//Monthly
						if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){
							$custom_array = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$emp_info->joining_date);
							array_push( $payment_frequency_date, $custom_array );
						}					
				}				
			}
			
			
			//@pankaj 29-9-2016  pay. frq. =="" and go button  then create $payment_frequency_date Start 
			
			
			else 
			{// die("bydefault case");
				/*
				//@sunny create start and end dates according to null payment frequency
				*/
				//echo"<pre>"; print_r($data['employee_info']); 
				foreach($data['employee_info'] as $emp_info)
				{ 	$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id /*,'payment_frequency' => $data['payment_frequency']*/ ), FALSE);
					//echo "<pre>"; print_r($emp_info->employee_id); echo " E ID </br>";
					//echo "<pre>"; print_r(isset($data['employee_info_of_payment_frequecy'])); 
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					
					$data['payment_frequency']=$data['employee_info_of_payment_frequecy'][0]->payment_frequency;
					//print_r($data['payment_frequency']);
					}
					
					//Two Weekly
					if($data['payment_frequency']==0 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(0,$data['two_weekly_payment_date'],$emp_info->joining_date);
						array_push( $payment_frequency_date, $custom_array );
					}
					//Weekly
					if($data['payment_frequency']==1 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){ //print_r($emp_info->joining_date);die;
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(1,$data['weekly_payment_date'],$emp_info->joining_date);
						array_push( $payment_frequency_date, $custom_array );
					}
					//print_r($payment_frequency_date);die;
					//Bi-Monthly
					if($data['payment_frequency']==2 && count($data['employee_info_of_payment_frequecy'] ) > 0 ){
					$custom_array = $this->payroll_model->get_payment_frequency_date_array(2 , array($data['bi_monthly_payment_date1'],$data['bi_monthly_payment_date2'] ) , $emp_info->joining_date);					
						array_push( $payment_frequency_date, $custom_array );
					}
					//Monthly
					if($data['payment_frequency']==3 && count($data['employee_info_of_payment_frequecy'] ) > 0){
						$custom_array = $this->payroll_model->get_payment_frequency_date_array(3,$data['monthly_payment_date'],$emp_info->joining_date);
						array_push( $payment_frequency_date, $custom_array );
					}
					
				}
				//die("pankajjhere");
				
				//$payment_frequency_date=$this->payroll_model->array_2d_to_1d($payment_frequency_date);
				
			}
						
			
		
			
			//get paid salary details from payroll table using date
			$data['check_salary_payment'] = array();
			$last_pay_date = array();
			
			foreach($check_salary_payment as $salary_payment)
			{ 
				$salary_payment->paid_status = 'paid';
				//$u_id = $salary_payment->department_id."_".$salary_payment->designations_id."_".$salary_payment->employee_id;	
				$salary_payment->global_allowance = explode("<-->",$salary_payment->global_allowance);
				$salary_payment->extra_allowance = explode("<-->",$salary_payment->extra_allowance);
				$salary_payment->extra_deduction = explode("<-->",$salary_payment->extra_deduction);
				$salary_payment->global_deduction = explode("<-->",$salary_payment->global_deduction);
				$data['check_salary_payment'][$salary_payment->employee_id][] = $salary_payment;
				 
				$first_date = $last_pay_date[$salary_payment->employee_id]['next_paydate'] = date('Y-m-d',strtotime($salary_payment->end_payment_date.' +1 days'));
				$last_date = $last_pay_date[$salary_payment->employee_id]['end_paydate'] = $data['end_payment_date'];
				 //return $data;
				
			}
			
			
			//get global employee info by payment frequency
			$this->payroll_model->_table_name = 'tbl_allow_ded';
			$this->payroll_model->_order_by = 'id';
			
			$global_deduct_allow = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
			
			//get employee_attendance
			$attendance_info = array();
			$emp_attendance_info = array();
			
			$this->payroll_model->_table_name = "tbl_gsettings";  
			$this->payroll_model->_order_by = "id_gsettings";
			$data['total_working_hour'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
			
			
			$working_hour = $data['total_working_hour'][0]->working_hr;
			
			//@sunny access the all employee of that payment frequency
			
			$z="";
			 if(isset($z))
			 {
				$z=0; 
			 }
			//$z=0;  //@pankaj 29-9-2016 Add variable $z=0;      
			
			//$payment_frequency_date_new = "";
			$payment_frequency_date_new=array();
			
			foreach($data['employee_info'] as $key=>$emp_info)
			{	
				//@sunny 21 August 2016 according to payment frequency and payment date starts here....
				//@pankaj 29-9-2016 add $key for when select pay frq.==""
					
				if(
					(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') != "") && ($this->input->post('designations_id') != "" ))
					
				)
				{  
					$payment_frequency_date_new=$payment_frequency_date;
					
					$z++; //@pankaj 29-9-2016 add $Z++ variable					
				} 
				if(
					(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') != "" ))
					
				)
				{ 
					$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id ,'payment_frequency' => $data['payment_frequency'] ), FALSE);
					
					//print_r($data['employee_info_of_payment_frequecy']); die;
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					$data['payment_frequency']=$data['employee_info_of_payment_frequecy'][0]->payment_frequency;
					 if(isset($payment_frequency_date[$z]))
					{
					$payment_frequency_date_new=$payment_frequency_date[$z];
					$z++; //@pankaj 29-9-2016 add $Z++ variable
					}
					
					}
					else
					{
						$payment_frequency_date_new=array();
					}				
				} 
				if(
					(($this->input->post('payment_frequency') == "" ) && ($this->input->post('employee_id') != "") && ($this->input->post('designations_id') != "" ))
					
				)
				{  
					$payment_frequency_date_new=$payment_frequency_date;
					$data['payment_frequency']=5;
					$z++; //@pankaj 29-9-2016 add $Z++ variable					
				} 
				
				if(
					(($this->input->post('payment_frequency') == "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') == "" ))
					
				)   //die("pankaj");
				{  /*if(isset($payment_frequency_date[$z]))
					{
					print_r($payment_frequency_date[$z]);die;
					$z=$z++;
					$payment_frequency_date_new=$payment_frequency_date[$z];
					$data['payment_frequency']=5;
					
					//@pankaj 29-9-2016 add $Z++ 
					}*/
						
					$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id  ), FALSE);
					
					//print_r($data['employee_info_of_payment_frequecy']); die;
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					if($data['payment_frequency']=isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					if(isset($payment_frequency_date[$z]))
					{
					
					//$z=$z++; 
				
					$payment_frequency_date_new=$payment_frequency_date[$z];
					
					$data['payment_frequency']=5;
					$z++;
					}
					else if($z!=0){ //print_r($z);//die("panakaj");
						
					$payment_frequency_date_new=$payment_frequency_date[$z];
					
					$data['payment_frequency']=5;
					$z++;
					}	
					}			
				}
				}
				if(
					(($this->input->post('payment_frequency') == "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') != "" ))
					
				)
				{ /* if(isset($payment_frequency_date[$z]))
					{
					$payment_frequency_date_new=$payment_frequency_date[$z];
					}
					$data['payment_frequency']=5;
					$z++; //@pankaj 29-9-2016 add $Z++ variable	*/
					$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id  ), FALSE);
					
					//print_r($data['employee_info_of_payment_frequecy']); die;
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					if($data['payment_frequency']=isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					if(isset($payment_frequency_date[$z]))
					{
					
					//$z=$z++; 
				
					$payment_frequency_date_new=$payment_frequency_date[$z];
					
					$data['payment_frequency']=5;
					$z++;
					}
					else if($z!=0){ //print_r($z);//die("panakaj");
						
					$payment_frequency_date_new=$payment_frequency_date[$z];
					
					$data['payment_frequency']=5;
					$z++;
					}	
					}			
				}
					
				} 
				
				if(
					
					(($this->input->post('payment_frequency') != "" ) && ($this->input->post('employee_id') == "") && ($this->input->post('designations_id') == "" ))
				)
				{					
					$this->payroll_model->_table_name = 'tbl_employee_payroll';
					$this->payroll_model->_order_by = 'employee_id';
					$data['employee_info_of_payment_frequecy'] = $this->payroll_model->get_by(array('employee_id' => $emp_info->employee_id ,'payment_frequency' => $data['payment_frequency'] ), FALSE);
					if(isset($data['employee_info_of_payment_frequecy'][0]->payment_frequency)){
					//$data['payment_frequency']=$data['employee_info_of_payment_frequecy'][0]->payment_frequency;
					 if(isset($payment_frequency_date[$z]))
					{
					$payment_frequency_date_new=$payment_frequency_date[$z];
				    }
					$z++; //@pankaj 29-9-2016 add $Z++ variable
					}
					else
					{
						$payment_frequency_date_new=array();
					}				
				} 
					
				
				foreach($payment_frequency_date_new as $payment_date_key=>$payment_date_value)
				{	
					//date used for filters
					$data['start_payment_date']=$payment_date_value['start_payment_date']; 
					$data['end_payment_date'] =$payment_date_value['end_payment_date'];	
					
					$emp = $emp_info->employee_id;
							 
					$this->payroll_model->_table_name = "tbl_employee_payroll"; //table name
					$this->payroll_model->_order_by = "employee_id";
					$where = array(
						'id_gsettings' => $this->session->userdata('id_gsettings'), 
						'employee_id' => $emp,
						
					);
					$data['employee_payroll_detail'] = $this->payroll_model->get_by($where);
					
					if(!empty($data['employee_payroll_detail']))
					{ 
						$emp_salary =$data['employee_payroll_detail'][0]->basic_salary;
					}
						
								
					//***********************************HOURLY SALARY TYPE *******************************
					if(!empty($last_pay_date[$emp]) && strtotime($last_pay_date[$emp]['next_paydate']) <= strtotime($last_pay_date[$emp]['end_paydate']) )
					{ 
						//$attendance_info = $this->payroll_model->get_all_attendance($emp,$last_pay_date[$emp]['next_paydate'],$last_pay_date[$emp]['end_paydate']);
						$attendance_info = $this->payroll_model->get_all_attendance_attendance_status_present($emp,$data['start_payment_date'],$data['end_payment_date']);
						$year = date('Y',strtotime($last_pay_date[$emp]['next_paydate']));
						$month = date('m',strtotime($last_pay_date[$emp]['next_paydate'])); 
						//$total_work_day = cal_days_in_month(CAL_GREGORIAN, $month, $year); 
						
						$start_days = new DateTime($last_pay_date[$emp]['next_paydate']);
						$end_days = new DateTime($last_pay_date[$emp]['end_paydate']);
								
						$total_work_day = $end_days->diff($start_days)->days + 1;
						
						//$size = $leave =  $leave_min = 0;
						
						//@sunny calculate the total leave of candidate				
						$emp_salary_info = $this->payroll_model->get_hourly_employee_leave_by_id($emp);
						//print_r($emp_salary_info);die;				
						$size = $leave =  $leave_min = count($emp_salary_info);
						
						
						$no_of_work_day = $size;
						$no_of_work_hours = $size;
						$no_of_leave_day = $size;
						$no_of_leave_hours = $size;
					}
					//**********************************FIXED SALARY TYPE*************************
					else
					{ 
						/*$attendance_info = $this->payroll_model->get_all_attendance($emp,$data['start_payment_date'],$data['end_payment_date']);
						
						$year = date('Y',strtotime($this->input->post('start_payment_date')));
						$month = date('m',strtotime($this->input->post('start_payment_date'))); 
						//$total_work_day = cal_days_in_month(CAL_GREGORIAN, $month, $year); 		
						$total_work_day =$this->payroll_model->getWorkingDays($this->input->post('start_payment_date'),$this->input->post('end_payment_date'));
						
						//get_working_days_in_week 
						$start_days = new DateTime($this->input->post('start_payment_date'));
						$end_days = new DateTime($this->input->post('end_payment_date'));
								
						//$total_work_day = $end_days->diff($start_days)->days + 1;
						
						//@sunny calculate the total leave of candidate
						
						$emp_salary_info = $this->payroll_model->get_fixed_employee_leave_by_id($emp,$data['start_payment_date'],$data['end_payment_date']);
						
						$size = $leave =  $leave_min = count($emp_salary_info);
						//$size = $leave =  $leave_min = 0;
						$no_of_work_day = $size;
						$no_of_work_hours = $size;
						$no_of_leave_day = $size;
						$no_of_leave_hours = $size;*/
						
						//@sunny 20 august 2016
						$attendance_info = $this->payroll_model->get_all_attendance_attendance_status_present($emp,$data['start_payment_date'],$data['end_payment_date']);
						
						$no_of_work_day = count($attendance_info);
								
						$total_work_day =$this->payroll_model->getWorkingDaysBetweenTwoDates($data['start_payment_date'],$data['end_payment_date']);
									
						//@sunny calculate the total leave of candidate				
						$emp_leave_info = $this->payroll_model->get_fixed_employee_leave_by_id($emp,$data['start_payment_date'],$data['end_payment_date']);
						$no_of_leave_day = count($emp_leave_info);
						
						$no_of_leave_hours = $no_of_leave_day;								
						$no_of_work_hours = $no_of_work_day;
						$size = $leave =  $leave_min = 0;	
									
					}
					$emp_salary_info = $this->payroll_model->get_emp_salary_list($emp);
					/*if($this->input->post('payment_frequency') == ""){
					$emp_salary_info = $this->payroll_model->get_emp_salary_list($emp);
					}
					
					elseif($this->input->post('payment_frequency') != ""){
					$emp=$data['employee_info_of_payment_frequecy'][$z]->employee_id; 
					$emp_salary_info = $this->payroll_model->get_emp_salary_list($emp);
					
				    } //@pankaj 30-9-2016 for select employee acording to pay freq.
					*/
					if(!empty($salary_payment))
					{
						$first_date = $last_pay_date[$salary_payment->employee_id]['next_paydate'] = date('Y-m-d',strtotime($salary_payment->end_payment_date.' +1 days'));
						$last_date = $last_pay_date[$salary_payment->employee_id]['end_paydate'] = $data['end_payment_date'];
					}
					else
					{
						$first_date = $data['start_payment_date'];
						$last_date = $data['end_payment_date'];
						  
					}			
					
					$date = $first_date;
					$month = date('n', strtotime($date));
					$year = date('Y', strtotime($date));
					$num = cal_days_in_month(CAL_GREGORIAN, $month, $year); //@sunny 31 
					
					
					if ($month >= 1 && $month <= 9) {
						$yymm = $year . '-' . '0' . $month;
					} else {
						$yymm = $year . '-' . $month;
					}
					
					$public_holiday = $this->global_model->get_public_holidays($yymm);
					
					
					
					if (!empty($public_holiday)) {
						foreach ($public_holiday as $p_holiday) {
							for ($k = 1; $k <= $num; $k++) {

								if ($k >= 1 && $k <= 9) {
									$sdate = $yymm . '-' . '0' . $k;
								} else {
									$sdate = $yymm . '-' . $k;
								}
								//echo $sdate;

								if ($p_holiday->start_date == $sdate && $p_holiday->end_date == $sdate) {
									$p_hday[] = $sdate;
								}
								if ($p_holiday->start_date == $sdate) {
									for ($j = $p_holiday->start_date; $j <= $p_holiday->end_date; $j++) {
										$p_hday[] = $j;
									}
								}
							}
						}
					} 
					
					$date = $first_date;
					$day = date('d', strtotime($date));
					for ($i = 1; $i <= $num; $i++) {
						$data['dateSl'][] = $i;
					}
					$holidays = $this->global_model->get_holidays();			
					
					/*
					@SUNNY ARRAY ACCESS OF ATTANDENCE IF ATTANDENCE EXIST IN DATABASE TABLE "tbl_attendance" 
					IN BETWEEN start_payment_date and end_payment_date
					*/
					foreach($attendance_info as $attend)
					{
						 //echo "==============================";
						$min = 0;
						$hrs = 0;
						$leave_min = 0;
						
						//@sunny for multiple time added at attandence
						$attend_time_in_array=explode("<-->",$attend->time_in) ;
						$attend_time_in=$attend_time_in_array[0];
						
						$attend_time_out_array=explode("<-->",$attend->time_out) ;
						$attend_time_out=$attend_time_out_array[0];
						
						if(!empty($attend->time_in) && !empty($attend->time_out) && ($attend->attendance_status == 3))
						{
							
												
							$start_time = new DateTime("$attend->date $attend_time_in");
							$end_time = new DateTime("$attend->date $attend_time_out");
							$diff = $end_time->diff($start_time);
							$leave_min = ($diff->h * 60);
							$leave_min += $diff->i;
							 
						}
						else if(!empty($attend->time_in) && !empty($attend->time_out))
						{
							
							
							$start_time = new DateTime("$attend->date $attend_time_in");
							 $end_time = new DateTime("$attend->date $attend_time_out");
							$diff = $end_time->diff($start_time);
							$min = ($diff->h * 60);
							$min += $diff->i;
							
						}			
						
						//@sunny if candidate is present 		  
						if($attend->attendance_status == 1)
						{ 				
							
							if(!empty($emp_salary_info))
							{  
						 
								if($emp_salary_info->salary_type == 1)
								{
									
									$key = 1;
									$x = 0;  
									
									$data['total_working_hour'] = '';
									$data['total_overtime_hour'] = '';
									$data['total_holiday_hour'] = '';
									
									$h_array = array();
									$w_array = array();
									$o_array = array();
									
											
									for ($i = 1; $i <= $num; $i++) 
									{						
										
										if ($i >= 1 && $i <= 9) {

											$sdate = $yymm . '-' . '0' . $i;
										} else {
											$sdate = $yymm . '-' . $i;
										}
											
										 $day_name = date('l', strtotime("+$x days", strtotime($year . '-' . $month . '-' . $key)));
									
										 if($sdate <= $last_date && $sdate >= $first_date)
										 {				 
										 
												if (!empty($p_hday)) 
												{
													foreach ($p_hday as $v_hday) {
														if ($v_hday == $sdate) {
															$data['total_working_hour'] = $working_hour;
														}
													}
												}
												else
												{
													$data['employee_id'] = $this->input->post('employee_id', TRUE);
													$this->payroll_model->_table_name = "tbl_attendance"; //table name
													$this->payroll_model->_order_by = "employee_id";
													$where = array(
														'id_gsettings' => $this->session->userdata('id_gsettings'),
														'date' => $sdate,
														'employee_id' => $emp,
														
													);
													$data['total_salary_count_info'] = $this->payroll_model->get_by($where);
													
													if(!empty($data['total_salary_count_info']))
													{ 
														$time_in = $data['total_salary_count_info'][0]->time_in; 
														
														$time_out = $data['total_salary_count_info'][0]->time_out;  
														
														$start_time = new DateTime("$time_in");
														$end_time = new DateTime("$time_out");
														$diff = $end_time->diff($start_time);
														$min = ($diff->h * 60);
														$min += $diff->i;
														$hour = $min/60; 
														$total_working_hour = $hour;
														
														  $sum_holiday_time = array($total_working_hour);
													
														  
														if($total_working_hour <= $working_hour)
														{
															
															$w_array[] = $total_working_hour;
															
														} 
														else if($total_working_hour > $working_hour)
														{ 
															
															//$sum_working_time = 22;//(sum of total working hour)
															//$sum_over_time = 2;//(sum of total over hour)
															$w_array[] = $working_hour;
															$o_array[] = $total_working_hour - $working_hour;
														
																 
														} 
													}
															
													foreach ($holidays as $v_holiday) {
														 
														
														if ($v_holiday->day == $day_name) {
															
															$data['employee_id'] = $this->input->post('employee_id', TRUE);
															$this->payroll_model->_table_name = "tbl_attendance"; //table name
															$this->payroll_model->_order_by = "employee_id";
															$where = array(
																'id_gsettings' => $this->session->userdata('id_gsettings'),
																'date' => $sdate,
																'employee_id' => $emp,
																
															);
															$data['hiloday_salary_count_info'] = $this->payroll_model->get_by($where);
															
															if(!empty($data['hiloday_salary_count_info']))
															{
																$time_in = $data['hiloday_salary_count_info'][0]->time_in; 
																
																$time_out = $data['hiloday_salary_count_info'][0]->time_out;  
																
																$start_time = new DateTime("$time_in");
																$end_time = new DateTime("$time_out");
																$diff = $end_time->diff($start_time);
																$min = ($diff->h * 60);
																$min += $diff->i;
																$hour = $min/60; 
																$total_holiday_hour = $hour; 
																//$sum_holiday_time = array($total_working_hour);
																$h_array[] = ($total_holiday_hour);
																
															}
														} 
													}
													
												}
										 } // if 
										 
										
										$key++;
									}  //for loop ends of working days     
										
									$w_sum[$emp] = array_sum($w_array);
									$sum_working_time  = $w_sum[$emp];
									
									$total_working_salary = ($sum_working_time * $emp_salary);  
									   
									$o_sum[$emp] = array_sum($o_array);
									//print_r($o_sum[$emp]);
									$sum_overtime_hour  = $o_sum[$emp];
									$total_overtime_salary = ($sum_overtime_hour * $emp_salary * 1.5);
									
									$h_sum[$emp] = array_sum($h_array);
									$sum_holiday_time  = $h_sum[$emp];
									$total_holiday_salary = ($sum_holiday_time * $emp_salary);
									 
									$basic_hourly_salary = ($total_working_salary + $total_overtime_salary + $total_holiday_salary);
									
									
								}
								else
								{
									//echo "kk";
									$a = ($attend);
									$size++;
									//$no_of_work_day = $size; //@sunny 20 august 2016
									//print_r($a);
								}
							}
						}
						//@sunny if candidate is on leave  
						else if($attend->attendance_status == 0)
						{
							$a = ($attend);
							$leave++;
							$no_of_leave_day = $leave;
						}
						//@sunny if candidate is holiday 
						else if($attend->attendance_status == 'H')
						{
							if(!empty($emp_salary_info))
							{

								if($emp_salary_info->salary_type == 1)
								{
									$no_of_work_hours += $min;
								}
								else
								{
									$size++;
									$no_of_work_day = $size;
								}
							}
						}
						else if($attend->attendance_status == 2)
						{ 
							if(!empty($emp_salary_info))
							{

								if($emp_salary_info->salary_type == 1)
								{
									$no_of_work_hours += $min;
									//echo $no_of_work_hours;
									//echo "Fgfgfdgdfgd";
								}
								else
								{
									$leave++;
									$no_of_leave_day = $leave ;
								}									
							}
							 
						}
						//@sunny if candidate is on leave  
						else if($attend->attendance_status == 3)
						{ 
							//echo "hello";
							if(!empty($emp_salary_info))
							{
								if($emp_salary_info->salary_type == 1)
								{
									 $no_of_leave_hours += $leave_min;
									 // echo "jj".$no_of_leave_hours;
									// $no_of_work_hours += $min;
									 // echo "kk".$no_of_work_hours;
								}
								else
								{ 
									$size++;
									$no_of_work_day = $size;
								}									
							}
							 
						}
					}//FOR LOOP ENDS OF ATTANDENCE ... WHICH IS USEFULL TO CALCULATE THE basic_hourly_salary
					
							
					
					if(!empty($data['check_salary_payment'][$emp]))
					{
						$cnt_pay = count($data['check_salary_payment'][$emp]);
						
					}
					else
					{
						$cnt_pay = 0;
					}
					
					$pay_salary_info = $emp_salary_info;
					if(!empty($pay_salary_info))
					{	
						$pay_salary_info->hrs 	= floor($no_of_leave_hours/60);
						$pay_salary_info->leave_min = ($no_of_leave_hours % 60);
						$pay_salary_info->day 	= $no_of_work_day;
					}
					
					//$basic_hourly_salary = ($total_working_salary + $total_overtime_salary + $total_holiday_salary);
					
					/******
					@SUNNY IF EMPLOYEE SETUPED THE SALARY IN "tbl_employee_payroll" AND 
					IF ATTANDENCE EXIST IN DATABASE TABLE "tbl_attendance" IN BETWEEN start_payment_date and end_payment_date
					*/
					
					if(!empty($emp_salary_info) && !empty($attendance_info) )
					{
						$pay_salary_info->payment_date=$data['start_payment_date']."</br>-</br>".$data['end_payment_date']; //@sunny 2 September 2016
						$pay_salary_info->payment_month=$data['start_payment_date']; //@sunny 3 September 2016
						
						$pay_salary_info->no_of_work_day = $no_of_work_day; //3sep2016
						$pay_salary_info->total_work_day = $total_work_day;	//3sep2016
						
						//@sunny If employee salary type is hourly
						if($emp_salary_info->salary_type == 1)
						{
							if(!empty($basic_hourly_salary))
							{				
								$working_salary = $total_working_salary - $total_holiday_salary;
								$holiday_salary = $total_holiday_salary * 2;
								// print_r($no_of_leave_hours);
								$pay_salary_info->total_working_salary = $working_salary;
								$pay_salary_info->total_overtime_salary = $total_overtime_salary;
								$pay_salary_info->total_holiday_salary = $holiday_salary;
								
								$emp_bdate = $emp_info->date_of_birth;
								$emp_bdate_year = date('Y') - date('Y',strtotime($emp_bdate));
								$salary_job_sector = $data['employee_payroll_detail'][0]->job_sector;
								 //echo $emp_bdate1 = (date('Y') - date('Y',$emp_bdate));
														
								//$pay_salary_info->basic_salary = $basic_hourly_salary;
								
								
								
								$deduct_data = array(
									'year' =>  date('Y'),//strtotime()
									'empAge' => $emp_bdate_year,//date(Y) - date(Y,emp_bdate)
									'sector' => $salary_job_sector,
									'salary' => $basic_hourly_salary,
									'employee_id' => $emp
								);
								
								$deductInfo['ss_salary'] = $this->payroll_model->getSalaryCalculationForSS($deduct_data);
								 
							
								$deductInfo['pt_salary'] = $this->payroll_model->getSalaryCalculationForPayTax($deduct_data);
								
								$deductInfo['nhi_salary'] = $this->payroll_model->getSalaryCalculationForNHI($deduct_data);
								
								$pay_salary_info->social_security = (isset($deductInfo['ss_salary']->employeeSS))?$deductInfo['ss_salary']->employeeSS:'';
								 
								$pay_salary_info->nhi_deduction = (isset($deductInfo['nhi_salary']->employeeNhi))?$deductInfo['nhi_salary']->employeeNhi:'';
								
								$pay_salary_info->spouse_nhi_deduction =  (isset($deductInfo['nhi_salary']->employeeSpouseNhi)) ?$deductInfo['nhi_salary']->employeeSpouseNhi :'';
								
								if(!empty($deductInfo['ss_salary']))
								{
									$pay_salary_info->social_security = $deductInfo['ss_salary']->employeeSS;
								}
								else
								{
									$pay_salary_info->social_security = '0';
								}
								
								if(!empty($deductInfo['nhi_salary']))
								{
									$pay_salary_info->nhi_deduction = $deductInfo['nhi_salary']->employeeNhi;
								}
								else
								{
									$pay_salary_info->nhi_deduction = '0';
								}
								
								if(!empty($deductInfo['nhi_salary']))
								{
									$pay_salary_info->spouse_nhi_deduction =(isset($deductInfo['nhi_salary']->employeeSpouseNhi)) ?$deductInfo['nhi_salary']->employeeSpouseNhi :'';
								}
								else
								{
									$pay_salary_info->spouse_nhi_deduction =  '0';
								}	
								
								
							}
								$pay_salary_info->payroll_tax_deduction = 0;
								
								if($pay_salary_info->basic_salary >= 10000)						
								{
									$payroll_tax_deduction = $deductInfo['pt_salary']->employeePayTax;
									$pay_salary_info->payroll_tax_deduction = $payroll_tax_deduction;
								}
								
								//@sunny calculate the total leave deduction 
								 $pay_salary_info->no_of_total_leave_hours = $no_of_leave_hours ;						
								 $pay_salary_info->leave_deduction = $pay_salary_info->basic_salary * ($no_of_leave_hours/$total_work_day); 
								
								
						}			
						/**
						//@sunny If employee salary type is fixed
						*/
						else
						{ 
							$basic_salary = $pay_salary_info->basic_salary;
							$emp_bdate = $emp_info->date_of_birth;
							$emp_bdate_year = date('Y') - date('Y',strtotime($emp_bdate));
							$salary_job_sector = $data['employee_payroll_detail'][0]->job_sector;
							 //echo $emp_bdate1 = (date('Y') - date('Y',$emp_bdate));
							 //print_r($basic_hourly_salary);
							 //echo "==";
							$pay_salary_info->basic_salary =  $basic_salary;
							$pay_salary_info->payment_date=$data['start_payment_date']."</br>-</br>".$data['end_payment_date']; //@sunny 2 august 2016
							$pay_salary_info->payment_month=$data['start_payment_date']; //@sunny 3 august 2016
							$deduct_data = array(
								'year' =>  date('Y'),//strtotime()
								'empAge' => $emp_bdate_year,//date(Y) - date(Y,emp_bdate)
								'sector' => $salary_job_sector,
								'salary' => $basic_salary,
								'employee_id' => $emp
							);
							
							$deductInfo['ss_salary'] = $this->payroll_model->getSalaryCalculationForSS($deduct_data);
							
							$deductInfo['pt_salary'] = $this->payroll_model->getSalaryCalculationForPayTax($deduct_data);
							
							$deductInfo['nhi_salary'] = $this->payroll_model->getSalaryCalculationForNHI($deduct_data);
							
							
							//@sunny commented this code for get actual social ss ,nhi,patax via dtabase
							/*if(!empty($deductInfo['ss_salary']))
							{
								$pay_salary_info->social_security = $deductInfo['ss_salary']->employeeSS;
							}
							else
							{
								$pay_salary_info->social_security = '0';
							}
							
							if(!empty($deductInfo['nhi_salary']))
							{
								$pay_salary_info->nhi_deduction = $deductInfo['nhi_salary']->employeeNhi;
							}
							else
							{
								$pay_salary_info->nhi_deduction = '0';
							}
							
							if(!empty($deductInfo['nhi_salary']))
							{
								$pay_salary_info->spouse_nhi_deduction = $deductInfo['nhi_salary']->employeeSpouseNhi;
							}
							else
							{
								$pay_salary_info->spouse_nhi_deduction =  '0';
							}	
							
							
							// $pay_salary_info->nhi_deduction = $deductInfo['nhi_salary']->employeeNhi;
							
							//$pay_salary_info->spouse_nhi_deduction =  $deductInfo['nhi_salary']->employeeSpouseNhi;
						*/
							
							/*
							//@sunny 21july for calculate leave deduction 		
							
							$pay_salary_info->no_of_total_leave_hours = $no_of_leave_hours ;
							$pay_salary_info->leave_deduction = $pay_salary_info->basic_salary * ($no_of_leave_hours/$total_work_day); 
											
							if($pay_salary_info->basic_salary >= 10000)
							{
								$pay_salary_info->payroll_tax_deduction = $emp_salary_info->payroll_tax_deduction;						
							}
							else
							{
								$pay_salary_info->payroll_tax_deduction = 0;						
							}*/			
							
												
							//@sunny 21 August set the required fields
							$pay_salary_info->basic_salary =  $basic_salary;
							//echo "basic_salary==>".$basic_salary; echo "</br>";
							//echo "no_of_work_day==>".$no_of_work_day; echo "</br>";
							//echo "total_work_day==>".$total_work_day; echo "</br>";
							//echo 
							
							//$pay_salary_info->no_of_work_day = $no_of_work_day; //3sep2016
							//$pay_salary_info->total_work_day = $total_work_day;	//3sep2016					
							
							$working_salary=$basic_salary * ($no_of_work_day/$total_work_day);
							
							$pay_salary_info->total_working_salary = $working_salary;
														
							$pay_salary_info->total_overtime_salary = (isset($total_overtime_salary)) ? $total_overtime_salary : '' ;
							$pay_salary_info->total_holiday_salary =  (isset($holiday_salary)) ? $holiday_salary : '' ;
							
							//@sunny 21july for calculate leave deduction 					
							$pay_salary_info->no_of_total_leave_hours = $no_of_leave_hours ;					
							$pay_salary_info->leave_deduction = $pay_salary_info->basic_salary * ($no_of_leave_day/$total_work_day); 
							
							
							//set payroll_tax_deduction 					
							if($pay_salary_info->basic_salary >= 10000)
							{
								$pay_salary_info->payroll_tax_deduction = $emp_salary_info->payroll_tax_deduction;						
							}
							else
							{
								$pay_salary_info->payroll_tax_deduction = 0;						
							}						
							
						}				
						
						
						foreach($global_deduct_allow as $glob)
						{
							
							$global_allow = '';
							$global_deduct = '';
							if($glob->allow_amt > 0)
							{
								if($glob->allow_amt_type == 'fix')
								{
									//@sunny 9 august
									$global_allow = $glob->allow_name .'='. $glob->allow_amt.'='. $glob->allow_amt_type.'='. $glob->allow_amt_tax;
								}
								else
								{
									//@sunny 9 august
									$global_allow = $glob->allow_name .'='. $pay_salary_info->basic_salary * ($glob->allow_amt/100).'='. $glob->allow_amt_type.'='. $glob->allow_amt_tax;
								}
							}
							
							if($glob->did_amt > 0)
							{
								if($glob->did_amt_type == 'fix')
								{
									//@sunny 9 august
									$global_deduct = $glob->did_name .'='. $glob->did_amt.'='. $glob->did_amt_type.'='. $glob->did_amt_tax;
								}
								else
								{
									//@sunny 9 august
									$global_deduct = $glob->did_name .'='. $pay_salary_info->basic_salary * ($glob->did_amt/100).'='. $glob->did_amt_type.'='. $glob->did_amt_tax;
								}
							}
							if(!empty($global_deduct))
							{
								$pay_salary_info->global_deduction[] = $global_deduct;
								$global_deduct = '';
							}
							if(!empty($global_allow))
							{
								$pay_salary_info->global_allowance[] = $global_allow;
								$global_allow = '';
							}
						}
						
						$pay_salary_info->extra_deduction = explode("<-->",$emp_salary_info->extra_deduction);
						unset($pay_salary_info->extra_deduction[count($pay_salary_info->extra_deduction)-1]);
						
						$pay_salary_info->extra_allowance = explode("<-->",$emp_salary_info->extra_allowance);
						unset($pay_salary_info->extra_allowance[count($pay_salary_info->extra_allowance)-1]);
						
						$pay_salary_info->next_paydate = (!empty($last_pay_date[$emp]['next_paydate'])) ? $last_pay_date[$emp]['next_paydate'] : $data['start_payment_date'] ;
						$pay_salary_info->end_paydate = (!empty($last_pay_date[$emp]['end_paydate'])) ? $last_pay_date[$emp]['end_paydate'] : $data['end_payment_date'];
						//print_r($pay_salary_info); die;
						$data['check_salary_payment'][$emp][$cnt_pay] = $pay_salary_info;
						
					}
					else if(empty($emp_salary_info)) 
					{
						$data['check_salary_payment'][$emp][0] = $emp_info;
						$data['check_salary_payment'][$emp][0]->set_salary_details = 1;
					}
					
				} //@sunny 21 August 2016 according to payment frequency and payment date ends here ...
				
				//@sunny 23 August 
				$data['start_payment_date'] = (isset($_POST['start_payment_date']) && $_POST['start_payment_date']!='')? $_POST['start_payment_date'] : '';
				$data['end_payment_date'] =(isset($_POST['end_payment_date']) && $_POST['end_payment_date']!='')? $_POST['end_payment_date'] : '';
				//$z++; //@pankaj 29-9-2016 add $Z++ variable 
			} //access the all employee of that payment frequency
			
		
		} // check employee id is empty or not 
		
		//@sunny global Allowance and Deduction
  
		$this->payroll_model->_table_name = 'tbl_allow_ded';
		$this->payroll_model->_order_by = 'id';
		$data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));		
		
		/*require_once('/home3/pappiean/public_html/payrollupdates/qbweb-app/docs/partner_platform/example_app_ipp_v3/config.php');
		
		$realmID=123145830971972;
		
		$JournalEntryService = new QuickBooks_IPP_Service_JournalEntry();

		$JournalEntry = new QuickBooks_IPP_Object_JournalEntry();

		$JournalEntry->setDocNumber('1234');

		$JournalEntry->setTxnDate(date('Y-m-d'));

		$Line1 = new QuickBooks_IPP_Object_Line();

		$Line1->setDescription('Payment for Employee'.$this->input->post('employee_id'));

		$Line1->setAmount(80);

		$Line1->setDetailType('JournalEntryLineDetail');

		$Detail1 = new QuickBooks_IPP_Object_JournalEntryLineDetail();

		$Detail1->setPostingType('Debit');

		$Detail1->setAccountRef(3);

		$Line1->addJournalEntryLineDetail($Detail1);

		$JournalEntry->addLine($Line1);
		
		$Line2 = new QuickBooks_IPP_Object_Line();
		
		$Line2->setDescription('Payment for Employee'.$this->input->post('employee_id'));
		
		$Line2->setAmount(80);
		
		$Line2->setDetailType('JournalEntryLineDetail');

		$Detail2 = new QuickBooks_IPP_Object_JournalEntryLineDetail();
		
		$Detail2->setPostingType('Credit');
		
		$Detail2->setAccountRef(56);

		$Line2->addJournalEntryLineDetail($Detail2);
		
		$JournalEntry->addLine($Line2);

		if ($resp = $JournalEntryService->add($Context, $realm, $JournalEntry))
		{
			//print('Our new journal entry ID is: [' . $resp . ']');
		}
		else
		{
			print($JournalEntryService->lastError($Context));
		}*/	
		//print_r($data['check_salary_payment']);die;
		$data['bank_account'] = $this->payroll_model->get_banks();	
		 
        $data['subview'] = $this->load->view('admin/payroll/make_payment', $data, TRUE);       
        
        $this->load->view('admin/_layout_main', $data);
    } // ends of make_payment function
    
    
	
	public function make_payment_old($id = NULL) {
        $data['title'] = "Make Payment";
        
		// retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
        $all_dept_info = $this->payroll_model->get();
        
		// get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }

        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag)) { // check employee id is empty or not 
            $data['flag'] = 1;
            if (!empty($id)) {
                $data['employee_id'] = $id;
            } else {
                $data['employee_id'] = $this->input->post('employee_id', TRUE);
                $data['designations_id'] = $this->input->post('designations_id', TRUE);
                $data['start_payment_date'] = $this->input->post('start_payment_date', TRUE);
                $data['end_payment_date'] = $this->input->post('end_payment_date', TRUE);
            }
            // check  existing salary payment information if exist or not
			
            // by employee id and payment date
            $data['check_salary_payment'] = $this->payroll_model->get_salary_payment_info($data['employee_id'], $data['start_payment_date'],NULL,$data['end_payment_date']);

            // get employee salary info by employee id and check 
            $check_salary_info = $this->payroll_model->get_emp_salary_list($data['employee_id']);
            if (!empty($check_salary_info)) {
                $data['emp_salary_info'] = $check_salary_info;
            } else {
                // get all employee info by designation id
                $this->payroll_model->_table_name = 'tbl_employee';
                $this->payroll_model->_order_by = 'employee_id';
                $employee_info = $this->payroll_model->get_by(array('employee_id' => $data['employee_id']), TRUE);

                $type = 'error';
                $message = 'You Did not Set Salary Details For <strong style="color:#000000">' .$employee_info->first_name . ' ' . $employee_info->last_name . '</strong> Please Set And Make Payment !';
                set_message($type, $message);
                redirect('admin/payroll/manage_salary_details');
            }

            // get award info by employee id and payment date
            $this->payroll_model->_table_name = 'tbl_employee_award';
            $this->payroll_model->_order_by = 'employee_id';
            $data['award_info'] = $this->payroll_model->get_by(array('employee_id' => $data['employee_id'], 'award_date' => $data['start_payment_date']), FALSE);

            // get all employee info by designation id
            $this->payroll_model->_table_name = 'tbl_employee';
            $this->payroll_model->_order_by = 'designations_id';
            $data['employee_info'] = $this->payroll_model->get_by(array('designations_id' => $data['designations_id']), FALSE);

            // get all employee attendance info by employee id
            $this->payroll_model->_table_name = 'tbl_attendance';
            $this->payroll_model->_order_by = 'attendance_id';
            $data['employee_absent_info'] = $this->payroll_model->get_all_attendance($data['employee_id'],$data['start_payment_date'],$data['end_payment_date']);

            
			
			
            // get payment history by employee id
            $data['payment_history'] = $this->payroll_model->get_salary_payment_info($data['employee_id']);
        }

        $data['subview'] = $this->load->view('admin/payroll/make_payment', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	public function get_payment($id = NULL) {

        // input data 
        //$data = $this->payroll_model->array_from_post(array('start_payment_date','end_payment_date', 'fine_deduction', 'payment_type', 'comments','payroll_tax_deduction','nhi_deduction','social_security','basic_salary','leave_deduction','total_working_hour','total_overtime_hour','total_holiday_hour'));
        //@pank 10-8-2016 check no
        //$data = $this->payroll_model->array_from_post(array('start_payment_date','end_payment_date', 'fine_deduction', 'payment_type','Cheque_payment_no', 'comments','payroll_tax_deduction','nhi_deduction','social_security','basic_salary','leave_deduction','total_working_hour','total_overtime_hour','total_holiday_hour'));
        //$data = $this->payroll_model->array_from_post(array('start_payment_date','end_payment_date', 'fine_deduction', 'payment_type','Cheque_payment_no', 'comments','payroll_tax_deduction','nhi_deduction','social_security','basic_salary','leave_deduction','total_working_hour','total_overtime_hour','total_holiday_hour'));
        $data = $this->payroll_model->array_from_post(array('start_payment_date','end_payment_date', 'fine_deduction', 'payment_type', 'comments','payroll_tax_deduction','nhi_deduction','social_security','basic_salary','leave_deduction','total_working_hour','total_overtime_hour','total_holiday_hour'));
        $data['employee_id'] = $this->input->post('employee_id', TRUE);
		
		
		foreach($_POST['employee_id'] as $emp)
		{
			$dt= array();
			$dt['employee_id'] = $emp;
			$dt['basic_salary'] = $_POST['basic_sal'][$emp];
			$gross_salary= $_POST['employee_gross_salary'][$emp];//@pulkit 13august
			$dt['global_allowance'] = $_POST['global_allowance'][$emp];
			$dt['extra_allowance'] = $_POST['extra_allowance'][$emp];
			$dt['global_deduction'] = $_POST['global_deduction'][$emp];
			$dt['extra_deduction'] = $_POST['extra_deduction'][$emp];
			$dt['payroll_tax_deduction'] = $_POST['payroll_tax'][$emp];
			$dt['bank_accounts'] = $_POST['bank_accounts'][$emp];
			$dt['spouse_nhi_deduction'] = $_POST['spouse_nhi'][$emp];
			$dt['nhi_deduction'] = $_POST['nhi'][$emp];
			$dt['social_security'] = $_POST['social_security'][$emp];
			$dt['leave_deduction'] = $_POST['leave_deduction'][$emp];
			$dt['payment_type'] = $_POST['payment_type'][$emp];
			
			$dt['no_of_work_day'] = $_POST['employee_no_of_work_day'][$emp];
			$dt['total_work_day'] = $_POST['employee_total_work_day'][$emp];
			$dt['no_of_total_leave_hours'] = $_POST['employee_no_of_total_leave_hours'][$emp];
			$dt['salary_type'] = $_POST['employee_salary_type'][$emp];
			
			$dt['total_working_salary'] = $_POST['employee_total_working_salary'][$emp];
			$dt['total_overtime_salary'] = $_POST['employee_total_overtime_salary'][$emp];
			 
			 
			
			//@pank 15-8-2016
			//******check value save starts ******
			if($dt['payment_type'] == 'Cheque Payment')
			{
				//if($this->input->post('Cheque_payment_no_'.$emp) && (!empty($this->input->post('Cheque_payment_no_'.$emp)))){
                                $Cheque_payment_no=$this->input->post('Cheque_payment_no_'.$emp);
                                if($this->input->post('Cheque_payment_no_'.$emp)  && (!empty($Cheque_payment_no)) ){
				$dt['Cheque_payment_no'] = $this->input->post('Cheque_payment_no_'.$emp);  
				}
			}
			$dt['payment_for_month'] = $_POST['payment_for_month'][$emp];
			$dt['start_payment_date'] = $_POST['next_paydate'][$emp];
			$dt['end_payment_date'] = $_POST['end_paydate'][$emp];
			$dt['total_working_hour'] = $_POST['total_working_hour'][$emp]; 
			$dt['total_overtime_hour'] = $_POST['total_overtime_hour'][$emp]; 
			$dt['total_holiday_hour'] = $_POST['total_holiday_hour'][$emp]; 
			
			//******CREATE DIRECT DEPOSITE FILE STARTS ******
			if($dt['payment_type'] == 'Direct Deposite')
			{							
				
				$dd_string="Employee Id :".$emp."\r\n"."Basic Salary :".$_POST['basic_sal'][$emp]."\r\n";
				$this->load->model('settings_Model');				
				$company_direct_deposit_info=$this->settings_Model->select_dd_info();		
				
			
				foreach($company_direct_deposit_info as $key=>$value)
				{
					if($key=='idrn')
					{
						$key="Immediate Destination Routing Number";
					}
					if($key=='ior')
					{
						$key="Immediate Origin Routing";
					}	
					if($key=='cn')
					{
						$key="Company Name";
					}	
					if($key=='ced')
					{
						$key="Company Entry Description";
					}	
					if($key=='achr')
					{
						$key="ACH Reference(Optional)";
					}	
					
					if($key=='idn')
					{
						$key="Immediate Destination Name";
					}
					if($key=='cba')
					{
						$key="Company Bank Account";
					}	
					if($key=='cdd')
					{
						$key="Company Description Data(Optional)";
					}	
					if($key=='ciabb')
					{
						$key="Company Id Assigned By Bank";
					}	
					if($key=='ofin')
					{
						$key="Originating Financial Instiute RTN Number";
					}
										
					
						$dd_string.=$key." : ".$value."\r\n";
				}
				
				//Add Bank Info Of Employee 	
				$this->load->model('employee_Model');				
	
				$company_direct_deposit_bank_info=$this->employee_Model->select_dd_bank_info($emp);	
				 
				
				foreach($company_direct_deposit_bank_info as $key=>$value)
				{ if($key=='employee_id')
				 {
					$key="";
					$value="";
					
				 }
									
					$dd_string.=$key." : ".$value."\r\n";
				}
							
				
				if($_SERVER['HTTP_HOST']=='localhost')
				{						
					$root_folder_name = "/backofficevi1.com";
				}

				elseif($_SERVER['HTTP_HOST']=='kronosrock')
				{			
					$root_folder_name = "";
				}
				
				$folder_name = $_SERVER['DOCUMENT_ROOT'].$root_folder_name."/hrms/direct_deposit/";
				if (!file_exists($folder_name)) {
					mkdir($folder_name, 0777, true);
				}
				
				$date=date("d-m-Y h:i:s");
				$file=$folder_name.$dt['employee_id']."_".$date.".txt"; 
				$file_name=$dt['employee_id']."_".$date.".txt"; 				
				 
				//using the FILE_APPEND flag to append the content.
				file_put_contents ($file, $dd_string, FILE_APPEND);
				$dt['direct_deposit_file'] = $file_name; 
				
			}
			//******CREATE DIRECT DEPOSITE FILE ENDS ******
			
			// save into tbl salary payment
			$this->payroll_model->_table_name = "tbl_salary_payment"; // table name
			$this->payroll_model->_primary_key = "salary_payment_id"; // $id
			$this->payroll_model->save($dt, $id);
			
			
			$salary_payment_id = $this->db->insert_id();
		
			$global_allowance_pay = $_POST['global_allowance_pay'][$emp];
			$global_deduction_pay = $_POST['global_deduction_pay'][$emp];
			$extra_allowance_pay = $_POST['extra_allowance_pay'][$emp];
			$extra_deduction_pay = $_POST['extra_deduction_pay'][$emp];
			
			$this->payroll_model->_table_name = 'tbl_salary_payment';
            $this->payroll_model->_order_by = 'salary_payment_id';
			$data['salary_payment_info'] = $this->payroll_model->get_by(array('salary_payment_id' => $salary_payment_id), TRUE);
			
			
			$tbl_account_data = $this->payroll_model->get_accounts(); 
			
			$this->payroll_model->_table_name = 'tbl_allow_ded';
            $this->payroll_model->_order_by = 'id';
			$global_deduct_allow = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
			$i = 0;
			
			$ref_no = 0;
			do{
				$ref_no = random_string('nozero',8);
			}while($this->payroll_model->get_ref_no($ref_no) == false);
			
			
			foreach($tbl_account_data as $account)
			{
				if($account->account_name!='Basic Salary'){
					
					$acc_payment = array();
					$acc_payment['reference_number'] = $ref_no;
					$acc_payment['account_name'] = $account->account_name;
					$acc_payment['account_id'] = $account->account_id;
					//$acc_payment['account_group'] = $account->account_group;
					$acc_payment['account_type'] = $account->account_group;
					$acc_payment['pay_date'] = date("Y-m-d");
					$acc_payment['salary_payment_id'] = $salary_payment_id;


					$account->account_name = strtolower($account->account_name);
				
					if($account->account_name == 'social security'){
						$acc_payment['amount'] = $dt['social_security'];
					}
					else if($account->account_name == 'nhi deduction'){
						$acc_payment['amount'] = $dt['nhi_deduction'];
					}
					else if($account->account_name == 'spouse nhi deduction'){
						$acc_payment['amount'] = $dt['spouse_nhi_deduction'];
					}
					
					//@pulkit 13august2016
					
					//else if($account->account_name == 'basic salary'){
						//$acc_payment['amount'] = $dt['basic_salary'];					
					//}					
					
					else if($account->account_name == 'gross pay'){
						$acc_payment['amount'] = $gross_salary;					
					}
					else if($account->account_name == 'payroll expense'){
						$acc_payment['amount'] = '';					
					}
					else if($account->account_name == 'cash'){
						$acc_payment['amount'] = '';					
					}
					//@pulkit 13august2016
					
					else if($account->account_name == 'payroll tax'){
						$acc_payment['amount'] = $dt['payroll_tax_deduction'];
					}
					else if($account->account_name == 'global allowance'){
						$acc_payment['amount'] = $global_allowance_pay;
					}
					else if($account->account_name == 'global deduction'){
						$acc_payment['amount'] = $global_deduction_pay;
					}
					else if($account->account_name == 'extra allowance'){
						$acc_payment['amount'] = $extra_allowance_pay;
					}
					else if($account->account_name == 'extra deduction'){
						$acc_payment['amount'] = $extra_deduction_pay;
					}
					else
					{
						foreach($global_deduct_allow as $glob_data){
							if($glob_data->allow_name == $account->account_name){
								if($glob_data->allow_amt_type == 'fix')
								{
									$acc_payment['amount'] = $glob_data->allow_amt;
								}
								else
								{
									$acc_payment['amount'] = $dt['basic_salary'] * ($glob_data->allow_amt/100);
								}
							}
							if($glob_data->did_name == $account->account_name){
								if($glob_data->did_amt_type == 'fix')
								{
									$acc_payment['amount'] = $glob_data->did_amt;
								}
								else
								{
									$acc_payment['amount'] = $dt['basic_salary'] * ($glob_data->did_amt/100);
								}
							}
						}
					}
					
					$this->payroll_model->_table_name = "tbl_account_payment"; // table name
					$this->payroll_model->_primary_key = "account_payment_id"; // $id					
					$this->payroll_model->save($acc_payment, $id);
				}
			}
		}
		
        $type = 'success';
        $message = 'Payment Information Successfully Updated !';
        set_message($type, $message);
        redirect('admin/payroll/make_payment');
    }

	//@rupali tomar start here generate cheque 
    
     public function salary_cheque_details($salary_payment_id) {
        $data['title'] = "Manage Salary Details";
        $this->payroll_model->_table_name = 'tbl_attendance';
        $this->payroll_model->_order_by = 'attendance_id';
        $data['employee_absent_info'] = $this->payroll_model->get_attendance_by_id($salary_payment_id);
        $data['salary_cheque_details'] = $this->payroll_model->get_salary_payment_info($emp_id = NULL, $payment_date = NULL, $salary_payment_id);

        //@sunny global Allowance and Deduction

        $this->payroll_model->_table_name = 'tbl_allow_ded';
        $this->payroll_model->_order_by = 'id';
        $data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));

		//******@sunny Select company all payment dates starts here****** 
        $this->load->model('settings_model');
		$this->settings_model->_table_name = "tbl_payment_date_settings"; //table name
		$this->settings_model->_order_by = "id";
		$val = $this->settings_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')), TRUE);

		if ($val) { // get general info by id
			foreach($val as $key => $value){
				if($key=='id'){
					$data["tbl_payment_date_settings_id"] = $value; // assign value from db 
				}
				else{
					$data[$key] = $value; // assign value from db 
				}
			}   
		}
		//******@sunny Select company all payment dates ends here******

        $data['subview'] = $this->load->view('admin/payroll/cheque_info', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
   
    //@pulkit 13.08.16
     public function download_deposite($id=null){		 	
		 
		 
		
		if($_SERVER['HTTP_HOST']=='localhost')
		{						
			$root_folder_name = "/backofficevi1.com";
		}

		elseif($_SERVER['HTTP_HOST']=='kronosrock')
		{			
			$root_folder_name = "";
		}		 
		 
			

		//create zip and download	
		$this->load->helper('download');
		$this->load->library('zip');					
		$path = $folder_name;
		
		
		//@sunny starts for multiple employee id 
		$salary_payment_id=	$id;
		$salary_payment_id=explode("_",$salary_payment_id);		
			
		$this->db->where_in("tbl_salary_payment.salary_payment_id", $salary_payment_id);
		$query_result = $this->db->get("tbl_salary_payment");
		$result = $query_result->result();
		
		
		//@sunny ends 
		foreach ($result as $row)
		{
			$folder_name = $_SERVER['DOCUMENT_ROOT'].$root_folder_name."/hrms/direct_deposit/".$row->direct_deposit_file;	
			$this->zip->read_file($folder_name);
		}		
		$this->zip->download('my_backup.zip');

		
            
		
     }
    //@rupali tomar end
   
    public function get_payment_old($id = NULL) {

        // input data 
        $data = $this->payroll_model->array_from_post(array('start_payment_date','end_payment_date', 'fine_deduction', 'payment_type', 'comments','payroll_tax_deduction','nhi_deduction','social_security','basic_salary','leave_deduction'));
        $data['employee_id'] = $this->input->post('employee_id', TRUE);
		
		
        //get employee salary info by employee id
        $emp_salary_info = $this->payroll_model->get_emp_salary_list($data['employee_id']);
        // set all info individualy
        $data['house_rent_allowance'] = $emp_salary_info->house_rent_allowance;
        $data['medical_allowance'] = $emp_salary_info->medical_allowance;
        $data['special_allowance'] = $emp_salary_info->special_allowance;
        $data['fuel_allowance'] = $emp_salary_info->fuel_allowance;
        $data['phone_bill_allowance'] = $emp_salary_info->phone_bill_allowance;
        $data['other_allowance'] = $emp_salary_info->other_allowance;
		
        $data['tax_deduction'] = $emp_salary_info->tax_deduction;
        $data['payment_for_month'] = date("Y-m",strtotime($this->input->post('start_payment_date')));
        $data['other_deduction'] = $emp_salary_info->other_deduction;

        $employee_leave_info = $this->payroll_model->get_all_attendance($data['employee_id']);
	

        // get award amount by array and get total amount by foreach query
        $total = 0;
        $award = $this->input->post('award', TRUE);
        if (!empty($award)) {
            foreach ($award as $v_award) {
                $total+=$v_award;
            }
        }
        $data['award_amount'] = $total;
        // save into tbl employee paymenet
        $this->payroll_model->_table_name = "tbl_salary_payment"; // table name
        $this->payroll_model->_primary_key = "salary_payment_id"; // $id
        $this->payroll_model->save($data, $id);

        $type = 'success';
        $message = 'Payment Information Successfully Updated !';
        set_message($type, $message);
        redirect('admin/payroll/make_payment');
    }

    public function salary_payment_details($salary_payment_id) {
        $data['title'] = "Manage Salary Details";
        $this->payroll_model->_table_name = 'tbl_attendance';
		$this->payroll_model->_order_by = 'attendance_id';
        $data['employee_absent_info'] = $this->payroll_model->get_attendance_by_id($salary_payment_id);
        $salary_payment_info_result = $this->payroll_model->get_salary_payment_info($emp_id = NULL, $payment_date = NULL, $salary_payment_id);
       $data['salary_payment_info']=$salary_payment_info_result[0];
     
       //@sunny global Allowance and Deduction
       
		$this->payroll_model->_table_name = 'tbl_allow_ded';
		$this->payroll_model->_order_by = 'id';
		$data['global_allow_deduct'] = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
       
       
        $data['subview'] = $this->load->view('admin/payroll/salary_payment_details', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

    public function salary_payment_info_pdf($employee_id) {
        $this->payroll_model->_table_name = 'tbl_attendance';
	$this->payroll_model->_order_by = 'attendance_id';
        $data['employee_absent_info'] = $this->payroll_model->get_all_attendance($employee_id);
        // get all employee salary info  by id
        $data['emp_salary_info'] = $this->payroll_model->get_salary_payment_info($employee_id);
        $viewfile = $this->load->view('admin/payroll/salary_payment_pdf', $data, TRUE);
        $this->load->helper('dompdf');
        pdf_create($viewfile, 'Salary Details - ' . $data['emp_salary_info']->first_name . ' ' . $data['emp_salary_info']->last_name);
    }

    public function payment_history_pdf($employee_id) {
        $data['title'] = "Manage Salary Details";
        // get employee salary info by employee id and check 
        $data['emp_salary_info'] = $this->payroll_model->get_emp_salary_list($employee_id);

        // get payment history by employee id
        $data['payment_history'] = $this->payroll_model->get_salary_payment_info($employee_id);

        $viewfile = $this->load->view('admin/payroll/payment_history_pdf', $data, TRUE);
        $this->load->helper('dompdf');
        pdf_create($viewfile, 'Payment History - ' . $data['emp_salary_info']->first_name . ' ' . $data['emp_salary_info']->last_name);
    }
    public function ytd_report_pdf() 
	{
        $data['title'] = "Ytd Reports";
        // retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
		
        $all_dept_info = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
		
        // get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }

        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag)) 
		{ // check employee id is empty or not 
            $data['flag'] = 1;
			
			$emp_id = $this->input->post('employee_id');
			$pay_freq = $this->input->post('payment_frequency');
			$desg = $this->input->post('designations_id');
			if(!empty($emp_id))
			{
				$data['employee_id'] = $this->input->post('employee_id', TRUE);
			}
			if(!empty($pay_freq))
			{
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);
			}
			$data['date'] = $this->input->post('date', TRUE);
			if(!empty($desg))
			{
				$data['designations_id'] = $this->input->post('designations_id', TRUE);
				
				$this->payroll_model->_table_name = 'tbl_employee';
				$this->payroll_model->_order_by = 'designations_id';
				
				$data['employee_info'] = $this->payroll_model->get_by(array('designations_id' => $data['designations_id']), FALSE);
			}
			//echo "<pre>";
			
            // get employee salary info by employee id and check 
            $data['payment_history'] = $this->payroll_model->get_salary_ytd_list($data);
			echo "<pre>";print_r($data);die;
			$viewfile = $this->load->view('admin/payroll/ytd_report_pdf', $data, TRUE);
			$this->load->helper('dompdf');
			pdf_create($viewfile, 'YTD Report');
		}
	}

	public function generate_payslip() {
        $data['title'] = "Generate Payslip";
        // retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
        $all_dept_info = $this->payroll_model->get_by(array('id_gsettings' => $this->session->userdata('id_gsettings')));
        // get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }

        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag)) 
		{ // check employee id is empty or not 
            $data['flag'] = 1;
			
			//get all employee by company
			$where = array('id_gsettings' => $this->session->userdata('id_gsettings'));
			
			
			//Check filter value and search data
			if($this->input->post('designations_id') != "")
			{
				$data['designations_id'] = $this->input->post('designations_id', TRUE);
				$where['designations_id'] = $data['designations_id'];
			}
			if($this->input->post('employee_id') != "")
			{
				$data['employee_id'] = $this->input->post('employee_id', TRUE);
				$where['employee_id'] = $data['employee_id'];
			}
			
			if($this->input->post('payment_frequency') != "")
			{
				$data['payment_frequency'] = $this->input->post('payment_frequency', TRUE);
				//$where['payment_frequency'] = $data['payment_frequency'];
			}
			
			//get all employee info by payment frequency
			$this->payroll_model->_table_name = 'tbl_employee';
			$this->payroll_model->_order_by = 'designations_id';
			$data['employee_info'] = $this->payroll_model->get_by($where);
			
			//date used for filters
			$data['start_payment_date'] = $this->input->post('start_payment_date', TRUE);
			$data['end_payment_date'] = $this->input->post('end_payment_date', TRUE);
			
			$where['start_payment_date'] = $data['start_payment_date'];
			$where['end_payment_date'] = $data['end_payment_date'];
			
			//get paid salary details from payroll table using date
			$data['check_salary_payment'] = array();
			$last_pay_date = array();
			
			$check_salary_payment = $this->payroll_model->get_salary_payment_details($where);
			
			foreach($check_salary_payment as $salary_payment)
			{
				$salary_payment->paid_status = 'paid';
				//$u_id = $salary_payment->department_id."_".$salary_payment->designations_id."_".$salary_payment->employee_id;	
				$data['check_salary_payment'][$salary_payment->employee_id][] = $salary_payment;
				
			}
		}

        $data['subview'] = $this->load->view('admin/payroll/generate_payslip', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	
    public function generate_payslip_old() {
        $data['title'] = "Generate Payslip";
        // retrive all data from department table
        $this->payroll_model->_table_name = "tbl_department"; //table name
        $this->payroll_model->_order_by = "department_id";
        $all_dept_info = $this->payroll_model->get();
        // get all department info and designation info
        foreach ($all_dept_info as $v_dept_info) {
            $data['all_department_info'][$v_dept_info->department_name] = $this->payroll_model->get_add_department_by_id($v_dept_info->department_id);
        }
        $flag = $this->input->post('sbtn', TRUE);
        if (!empty($flag)) { // check employee id is empty or not 
            $data['flag'] = 1;
            $data['designations_id'] = $this->input->post('designations_id', TRUE);
            $data['payment_date'] = $this->input->post('payment_date', TRUE);

            // get all employee info by designation id            
            $data['employee_info'] = $this->payroll_model->get_emp_salary_list($emp = NULL, $data['designations_id']);

            if (!empty($data['employee_info'])) {
                foreach ($data['employee_info'] as $v_emp_info) {
                    // check  existing salary payment information if exist or not
                    // by employee id and payment date
                    $data['check_salary_payment'][] = $this->payroll_model->get_salary_payment_info($v_emp_info->employee_id, $data['payment_date']);
                }
            }
        }

        $data['subview'] = $this->load->view('admin/payroll/generate_payslip', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

    public function receive_generated($salary_payment_id) {
        // check existing_recept_no by where 
        $where = array('salary_payment_id' => $salary_payment_id);
        $check_existing_recipt_no = $this->payroll_model->check_by($where, 'tbl_salary_payslip');
        if (!empty($check_existing_recipt_no)) {
            $data['payslip_number'] = $check_existing_recipt_no->payslip_number;
        } else {
            $this->payroll_model->_table_name = "tbl_salary_payslip"; //table name
            $this->payroll_model->_primary_key = "payslip_id";
            $payslip_id = $this->payroll_model->save($where);

            $pdata['payslip_number'] = date('Ym') . $payslip_id;
            $this->payroll_model->save($pdata, $payslip_id);
            redirect('admin/payroll/receive_generated/' . $salary_payment_id, 'refresh');
        }
        $data['title'] = "Generate Payslip";
        $data['employee_absent_info'] = $this->payroll_model->get_all_attendance($salary_payment_id);
        $data['employee_salary_info'] = $this->payroll_model->get_salary_payment_info($emp_id = NULL, $payment_date = NULL, $salary_payment_id);

        $data['subview'] = $this->load->view('admin/payroll/payslip_info', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
/*-----------------DEVENDRA WORK ---------------*/
	 public function fwl() {
	 	
        $data['title'] = "FWL";
        $data['levies'] = $this->payroll_model->foreignWorkerLevy();
        $data['subview'] = $this->load->view('admin/payroll/fwl', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	
	 public function foreign_levy($id='') {
	 	
        $data['title'] = "Foreign Levy";
		
		if (!empty($id)) {           
        $data['levy'] = $this->payroll_model->foreignWorkerLevyById($id);
		 if (empty($data['levy'])) 
		 {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/foreign_levy');
          }
        }
        $data['subview'] = $this->load->view('admin/payroll/foreign_levy', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }

	public function add_foreign_levy($id = NULL) 
	{
        $data = $this->payroll_model->array_from_post(array('year', 'sectors', 'factors', 'tier', 'levy_rate'));
		$this->payroll_model->_table_name = "foreign_levy";
        $this->payroll_model->_primary_key = "id";
		 if (!empty($id)) {
		
            $fwl_id = $id;
            $this->payroll_model->save($data, $id);
        } else {
            $fwl_id= $this->payroll_model->save($data);
        }
		$type = "success";
        $message = "Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/fwl');
        
    }
	 public function delete_levy($id='') {

        $this->payroll_model->_table_name = "foreign_levy";
        $this->payroll_model->_primary_key = "id";
        $this->payroll_model->delete($id);
		$type = "success";
        $message = "FWL Successfully Delete!";
        set_message($type, $message);
        redirect('admin/payroll/fwl');
	}
	 
	 /*------------------ DEVENDRA WORK 22-SEP-2015 ----------------*/
	
		public function spr_status()
	{
		$data['title'] = "SPR";
		$this->payroll_model->_order_by = "id";
        $data['sprs'] = $this->payroll_model->allSprStaus();
        $data['subview'] = $this->load->view('admin/payroll/spr_status', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
	}
	public function add_spr($id='') 
	{
	 	
        $data['title'] = "Add SPR";
		if (!empty($id)) {           
        $data['spr'] = $this->payroll_model->sprStausById($id);
		$data['editWages'] = $this->payroll_model->getAllWagesbySprId($id);
		 if (empty($data['spr'])) 
		 {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/foreign_levy');
          }
        }
		
        $data['subview'] = $this->load->view('admin/payroll/add_spr', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	public function addSpr($uid = NULL) 
	{
		$minAge = $this->input->post('emp_min_age');
		$maxAge = $this->input->post('emp_max_age');
		$minWage = $this->input->post('min_wage');
		$maxWage = $this->input->post('max_wage');
		$total_contri = $this->input->post('total_contri');
		$emp_share = $this->input->post('emp_share');
		$data = $this->payroll_model->array_from_post(array('name', 'year', 'sector', 'employee_type'));
		$this->payroll_model->_table_name = "tbl_spr";
        $this->payroll_model->_primary_key = "id";
		if(!empty($uid))
		{
			if($a  = $this->db->get_where('tbl_spr' , array('id' => $uid))->row())
			{
			   if($this->payroll_model->save($data, $uid) && $this->db->delete('tbl_add_wages', array('spr_id' => $uid)))
			   {
					$id = array();    
					foreach($minAge as $m)
					{
						$id[] = $a->id;
					}
					$keys = array("spr_id","emp_min_age","emp_max_age","min_wage","max_wage","total_contri","emp_share");
					$dataa = array();
					foreach(array_map(null, $id, $minAge, $maxAge, $minWage, $maxWage, $total_contri, $emp_share) as $key => $value)
					{
						$dataa[] = array_combine($keys, $value);
					}
					$this->db->insert_batch('tbl_add_wages', $dataa);
				} 
    		}  
		}
		else
		{ 
		   	$id = array();
		   	if($a = $this->db->get_where('tbl_spr', array('name'=>$this->input->post('name'), 'year'=>$this->input->post('year'), 'sector'=>$this->input->post('sector'), 'employee_type'=>$this->input->post('employee_type')))->row())
		   	{	
				foreach($minAge as $m)
				{
					$id[] = $a->id;
				}
		   	}
		  	else
		   	{	
				$i = $this->payroll_model->save($data);
				foreach($minAge as $m)
				{
					$id[] = $i;
				}
			}
		   	$keys = array("spr_id","emp_min_age","emp_max_age","min_wage","max_wage","total_contri","emp_share");
			$dataa = array();
			foreach(array_map(null, $id, $minAge, $maxAge, $minWage, $maxWage, $total_contri, $emp_share) as $key => $value)
			{
				$dataa[] = array_combine($keys, $value);
			}
			$this->db->insert_batch('tbl_add_wages', $dataa);
		}
		$type = "success";
        $message = "Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/spr_status');
    }
	/*----- wages--------------*/
	public function view_wages($param1='', $param2='')
	{
		
		$data['title'] = "View Wages";
		$this->payroll_model->_order_by = "id";
		if(!empty($param1))
		{
        	$data['wages'] = $this->payroll_model->getAllWagesbySprId($param1);
			$data['spr'] = $this->payroll_model->sprStausById($param1);
		}
		else
		{
			$data['wages'] = $this->payroll_model->viewAllWages();
		}
		if (!empty($param2)) {           
        $data['editWages'] = $this->payroll_model->viewWagesbyId($param2);
		 if (empty($data['editWage'])) 
		 {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/view_wages');
          }
        }
		$data['spr_id'] = $param1;
        $data['subview'] = $this->load->view('admin/payroll/view_wages', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
	}
	 public function delete_wage($id='') 
	 {
	 	$this->load->library('user_agent');
        $this->payroll_model->_table_name = "tbl_add_wages";
        $this->payroll_model->_primary_key = "id";
        $this->payroll_model->delete($id);
		$type = "success";
        $message = "Successfully Delete!";
        set_message($type, $message);
        redirect($this->agent->referrer());
	}
	/*--------------- 23/09/2015 -----------*/
	
	
	 
	 /*----------------ANJALi WORK---------------*/
	public function social_security()
	{
		$data['title'] = "Social Security";
		$data['funds'] = $this->payroll_model->social_security();
		
        $data['subview'] = $this->load->view('admin/payroll/social_security', $data, TRUE);
		$this->load->view('admin/_layout_main', $data);
	}
	
	public function add_social_security($id = NULL) {
        $data['title'] = "Add Social Security";
		$data['account_name'] = $this->accounting_model->account();
		
		$this->accounting_model->_table_name = "tbl_vendors"; 
		$this->accounting_model->_order_by = "vendor_id";
		$data['vendor_info'] = $this->accounting_model->get();
		// echo  $id; die;
        if (!empty($id)) {// retrive data from db by id            
            $data['cpf_info'] = $this->payroll_model->social_security_by_id($id);
			
			if (empty($data['cpf_info'])) {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/add_social_security');
            }
        }
		
        //page load
        $data['subview'] = $this->load->view('admin/payroll/add_social_security', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
    public function save_social_security($id = NULL) {
              
        // input data
		$ttl =array('total_wages' =>$this->input->post('employee_wage', TRUE)+$this->input->post('employer_wage', TRUE));
		$dt = $this->payroll_model->array_from_post(array('year','sector', 'emp_min_age', 'emp_max_age', 'employee_wage', 'employer_wage','account_id', 'vendor_name' )); //input post
		$data = array_merge($dt,$ttl);
		$data['id_gsettings'] = $this->session->userdata('id_gsettings');
		
		$this->payroll_model->_table_name = "tbl_cpf"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
		if(!empty($id)){
		//$cpf_id = $id;
        $this->payroll_model->save($data, $id);
		}
		else
		{
		$this->payroll_model->save($data);
		}
        // messages for user
        $type = "success";
        $message = "Social Security Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/social_security'); //redirect page
    }
	
	 public function delete_social_security($id = NULL) {

        $this->payroll_model->_table_name = "tbl_cpf"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
        $this->payroll_model->delete($id); // delete 
        // messages for user
        $type = "success";
        $message = "Social Security Information Successfully Delete !";
        set_message($type, $message);
        redirect('admin/payroll/social_security'); //redirect page
    }
	
	/*-------------------- Nationa Health Insurqance--------------------*/
	public function nhi()
	{
		$data['title'] = "National Health Insurance";
		$data['funds'] = $this->payroll_model->nhi();
		
        $data['subview'] = $this->load->view('admin/payroll/nhi', $data, TRUE);
		$this->load->view('admin/_layout_main', $data);
	}
	
	public function add_nhi($id = NULL) {
        $data['title'] = "Add National Health Insurance";
		$data['account_name'] = $this->accounting_model->account();
		
		$this->accounting_model->_table_name = "tbl_vendors"; 
		$this->accounting_model->_order_by = "vendor_id";
		$data['vendor_info'] = $this->accounting_model->get();
		// echo  $id; die;
        if (!empty($id)) {// retrive data from db by id            
            $data['nhi_info'] = $this->payroll_model->nhi_by_id($id);
			
			//print_r($data['cpf_info']); die();
            if (empty($data['nhi_info'])) {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/add_nhi');
            }
        }
		
        //page load
        $data['subview'] = $this->load->view('admin/payroll/add_nhi', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
    public function save_nhi($id = NULL) {
              
        // input data
		//echo "<pre>";print_r($_POST);die;
		$ttl =array('total_wages' =>$this->input->post('employee_wage', TRUE)+$this->input->post('employer_wage', TRUE));
		$dt = $this->payroll_model->array_from_post(array('year','sector', 'emp_min_age', 'emp_max_age', 'employee_wage', 'employer_wage','relation_ship','rate','account_id', 'vendor_name')); //input post
		$data = array_merge($dt,$ttl);
		$data['id_gsettings'] = $this->session->userdata('id_gsettings');
		
		$this->payroll_model->_table_name = "tbl_nhi"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
		if(!empty($id)){
			//$cpf_id = $id;
			$this->payroll_model->save($data, $id);
		}
		else
		{
			$this->payroll_model->save($data);
		}
        // messages for user
        $type = "success";
        $message = "National Health Insurance Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/nhi'); //redirect page
    }
	
	 public function delete_nhi($id = NULL) {

        $this->payroll_model->_table_name = "tbl_nhi"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
        $this->payroll_model->delete($id); // delete 
        // messages for user
        $type = "success";
        $message = "National Health Insurance Information Successfully Delete !";
        set_message($type, $message);
        redirect('admin/payroll/nhi'); //redirect page
    }

	
	/*-------------------- Payroll Tax --------------------*/
	public function payroll_tax()
	{
		//echo "hii";die;
		$data['title'] = "Payroll Tax";
		$data['funds'] = $this->payroll_model->payroll_tax();
		
        $data['subview'] = $this->load->view('admin/payroll/payroll_tax', $data, TRUE);
		$this->load->view('admin/_layout_main', $data);
	}
	
	public function add_payroll_tax($id = NULL) {
        $data['title'] = "Add Payroll Tax";
		$data['account_name'] = $this->accounting_model->account();

		$this->accounting_model->_table_name = "tbl_vendors"; 
		$this->accounting_model->_order_by = "vendor_id";
		$data['vendor_info'] = $this->accounting_model->get();
		// echo  $id; die;
        if (!empty($id)) 
		{
			// retrive data from db by id
            $data['pt_info'] = $this->payroll_model->payroll_tax_by_id($id);
			//print_r($data['cpf_info']); die();
            if (empty($data['pt_info'])) {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                //redirect('admin/payroll/add_social_security');
            }
        }
        //page load
        $data['subview'] = $this->load->view('admin/payroll/add_payroll_tax', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
    public function save_payroll_tax($id = NULL) {
              
        // input data
		//echo "<pre>";print_r($_POST);die;
		$ttl =array('total_wages' =>$this->input->post('employee_wage', TRUE)+$this->input->post('employer_wage', TRUE));
		$dt = $this->payroll_model->array_from_post(array('year','sector', 'emp_min_age', 'emp_max_age', 'employee_wage', 'employer_wage','account_id','business_class', 'vendor_name')); //input post
		$data = array_merge($dt,$ttl);
		
		$data['id_gsettings'] = $this->session->userdata('id_gsettings');
		
		$this->payroll_model->_table_name = "tbl_payroll_tax"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
		if(!empty($id)){
		//$cpf_id = $id;
        $this->payroll_model->save($data, $id);
		}
		else
		{
		$this->payroll_model->save($data);
		}
        // messages for user
        $type = "success";
        $message = "Payroll Tax Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/payroll_tax'); //redirect page
    }
	
	 public function delete_payroll_tax($id = NULL) {

        $this->payroll_model->_table_name = "tbl_payroll_tax"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
        $this->payroll_model->delete($id); // delete 
        // messages for user
        $type = "success";
        $message = "Payroll Tax Information Successfully Delete !";
        set_message($type, $message);
        redirect('admin/payroll/payroll_tax'); //redirect page
    }
	/*-------------------- Allowance and Deductions --------------------*/
	public function allow_ded()
	{
		//echo "hii";die;
		$data['title'] = "Allowance and Deductions";
		$data['funds'] = $this->payroll_model->allow_ded();
		
        $data['subview'] = $this->load->view('admin/payroll/allow_ded', $data, TRUE);
		$this->load->view('admin/_layout_main', $data);
	}
	public function add_allow_ded($id = NULL) {
        $data['title'] = "Add Allowance and Deductions";
		$data['account_name'] = $this->accounting_model->account();
		$data['ad_info'] = Array();
		//echo  $id; die;
        if (!empty($id)) 
		{
			// retrive data from db by id            
            $data['ad_info'] = $this->payroll_model->allow_ded_by_id($id);
			//print_r($data['cpf_info']); die();
            if (empty($data['ad_info'])) {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/add_allow_ded');
            }
        }
        //page load
        $data['subview'] = $this->load->view('admin/payroll/add_allow_ded', $data, TRUE);
		//print_r($data);
        $this->load->view('admin/_layout_main', $data);
    }
    public function save_allow_ded($id = NULL) {
              
        // input data
		//echo "<pre>";print_r($_POST);die;
      // $ttl =array('total_wages' =>$this->input->post('employee_wage', TRUE)+$this->input->post('employer_wage', TRUE));
      //  $data = $this->payroll_model->array_from_post(array('allow_name','allow_amt','allow_amt_type','allow_amt_tax','did_name','did_amt','did_amt_type','did_amt_tax','allow_account_id','ded_account_id')); //@psinput post
      
        $data = $this->payroll_model->array_from_post(array('allow_name','allow_amt','allow_amt_type','allow_amt_tax','did_name','did_amt','did_amt_type','allow_account_id','ded_account_id')); //@psinput post
       $data['id_gsettings'] = $this->session->userdata('id_gsettings');
	   //$data = array_merge($dt,$ttl);
		$this->payroll_model->_table_name = "tbl_allow_ded"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
		if(!empty($id)){
		//$cpf_id = $id;
        $this->payroll_model->save($data, $id);
		}
		else
		{
		$this->payroll_model->save($data);
		}
        // messages for user
        $type = "success";
        $message = "Allowance and Deductions Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/allow_ded'); //redirect page
    }
	public function delete_allow_ded($id = NULL) {

        $this->payroll_model->_table_name = "tbl_allow_ded"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
        $this->payroll_model->delete($id); // delete 
        // messages for user
        $type = "success";
        $message = "Allowance and Deductions Information Successfully Delete !";
        set_message($type, $message);
        redirect('admin/payroll/allow_ded'); //redirect page
    }
	
	
	 /*-------ANJALI WORK----22-SEP-2015-----*/
	 public function manage_fund($id = NULL){
    $data['title'] = "Manage Ethnic Fund";
  $data['ethnicFunds'] = $this->payroll_model->getEthnicfund($id); 
  $data['subview'] = $this->load->view('admin/payroll/manage_fund', $data, TRUE);
  $this->load->view('admin/_layout_main' , $data);  
 }
 public function ethnic_fund(){
   $data['title'] = "Manage Ethnic";
  $data['ethnic_info'] = $this->payroll_model->ethnic(); 
  $data['subview'] = $this->load->view('admin/payroll/ethnic_fund', $data, TRUE);
  $this->load->view('admin/_layout_main' , $data);  
 }
 
 public function add_ethnic_fund($id = NULL){
  $data['title'] = "Add Ethnic"; 
  
        if (!empty($id)) {
        	
            $data['ethnic_info'] = $this->payroll_model->ethnic_by_id($id);
   			$data['fund'] = $this->payroll_model->fund_by_id($id);
            if (empty($data['ethnic_info']) && empty($data['fund'])) {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/add_ethnic_fund');
            }
        }
  
  $data['subview'] = $this->load->view('admin/payroll/add_ethnic_fund', $data, TRUE);
  $this->load->view('admin/_layout_main' , $data);  
 }
 
  public function save_ethnic($uid = NULL) 
  {
  	$min = $this->input->post('min_wage');
        if(!empty($min))
        {
        	$min = $this->input->post('min_wage');
	}
	$max = $this->input->post('max_wage');
	if(!empty($max)){
		$max = $this->input->post('max_wage');
	}
	$contri = $this->input->post('monthly_contribution');
	if(!empty($contri)){
		$contri = $this->input->post('monthly_contribution');
	}
	
	$data = $this->payroll_model->array_from_post(array('name','description'));
  	$this->payroll_model->_table_name = "tbl_ethnic"; 
        $this->payroll_model->_primary_key = "id";
  if(!empty($uid))
  {	         
	   if($a  = $this->db->get_where('tbl_ethnic' , array('id' => $uid))->row())
	   {
		    	if($this->payroll_model->save($data, $uid) && $this->db->delete('tbl_fund_contri', array('fund' => $uid))){
		    		
		    		$id = array();				
				    foreach($min as $m){
				    	$id[] = $a->id;
			    	}
					
				   $keys = array("fund","min_wage","max_wage","monthly_contribution");	    
				   $dataa = array();
				   foreach (array_map(null, $id, $min, $max, $contri) as $key => $value ) {
				     $dataa[] = array_combine($keys, $value);
				   }				   	   
				   $this->db->insert_batch('tbl_fund_contri', $dataa);
				} 
	   }      
  }
  else
  { 
	   	   $id = array();
		   if($a  = $this->db->get_where('tbl_ethnic' , array('name' => $this->input->post('name')))->row())
		   {
			    foreach($min as $m){
			    $id[] = $a->id;
			    }
		   }
		   else
		   {
			    $data = $this->payroll_model->array_from_post(array('name','description')); 
			    $i = $this->payroll_model->save($data);
			    foreach($min as $m){
			    $id[] = $i;
			    }
		   }
		   
		   
		   $keys = array("fund","min_wage","max_wage","monthly_contribution");
		    
		   $dataa = array();
		   foreach (array_map(null, $id, $min, $max, $contri) as $key => $value ) {
		     $dataa[] = array_combine($keys, $value);
		   }
		   
		   $this->db->insert_batch('tbl_fund_contri', $dataa); 
  } 
        $type = "success";
        $message = "Ethnic Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/ethnic_fund');
    }
	
	public function delete_ethinic($id = NULL) {

        $this->payroll_model->_table_name = "tbl_ethinic"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
       
        if ($this->db->_error_message()){
			$type = "error";
	        $message = $this->db->_error_message();
	        set_message($type, $message);
		}
		else {
			$this->payroll_model->delete($id);
			$type = "success";
	        $message = "Ethnic Fund Information Successfully Delete !";
	        set_message($type, $message);
		}
         // delete 
        // messages for user
        
        redirect($this->agent->referrer()); //redirect page
    }
	
	 public function delete_fund($id = NULL) {
		
        $this->payroll_model->_table_name = "tbl_fund_contri"; //table name 
        $this->payroll_model->_primary_key = "id"; // $id
        $this->db->query("SET FOREIGN_KEY_CHECKS=0");
        $this->payroll_model->delete($id); // delete 
        $this->db->query("SET FOREIGN_KEY_CHECKS=1");
        // messages for user
        $type = "success";
        $message = "Ethnic Fund Information Successfully Delete !";
        set_message($type, $message);
        redirect($this->agent->referrer()); //redirect page
    }
	
	
	
	/*-----------------SDL--------------------------*/
	public function sdl()
	{
		$data['title'] = "SDL";
		$this->payroll_model->_table_name = "tbl_sdl"; 
		$this->payroll_model->_order_by = "id";
        $data['sprs'] = $this->payroll_model->get();
		
        $data['subview'] = $this->load->view('admin/payroll/manage_sdl', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
	}
	 public function add_sdl($id='') {
	 	
        $data['title'] = "Add SDL";
		if (!empty($id)) {           
        $data['spr'] = $this->payroll_model->getSDLById($id);
		 if (empty($data['spr'])) 
		 {
                $type = "error";
                $message = "No Record Found";
                set_message($type, $message);
                redirect('admin/payroll/sdl');
          }
        }
		
        $data['subview'] = $this->load->view('admin/payroll/add_sdl', $data, TRUE);
        $this->load->view('admin/_layout_main', $data);
    }
	public function save_sdl($id = NULL) 
	{
        $data = $this->payroll_model->array_from_post(array('min_sdl_value','max_sdl_value', 'payable_amount', 'calc'));
		$this->payroll_model->_table_name = "tbl_sdl";
        $this->payroll_model->_primary_key = "id";
		if(!empty($id))
		{
			$this->payroll_model->save($data, $id);
		}
		else
		{
			$this->payroll_model->save($data);
		}
		$type = "success";
        $message = "Information Successfully Saved!";
        set_message($type, $message);
        redirect('admin/payroll/sdl');
    }
	 
	 public function delete_sdl($id='') {
        $this->payroll_model->_table_name = "tbl_sdl";
        $this->payroll_model->_primary_key = "id";
        $this->payroll_model->delete($id);
		$type = "success";
        $message = "Successfully Delete!";
        set_message($type, $message);
        redirect('admin/payroll/sdl');
	}
	

}  
